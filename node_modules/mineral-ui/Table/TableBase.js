"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../utils");

var _TableContext = _interopRequireDefault(require("./TableContext"));

var _TableDataRow = _interopRequireDefault(require("./TableDataRow"));

var _TableHeaderRow = _interopRequireDefault(require("./TableHeaderRow"));

var _TableHeader = _interopRequireDefault(require("./TableHeader"));

var _TableTitle = _interopRequireDefault(require("./TableTitle"));

var _styled = require("./styled");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TableBase =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(TableBase, _Component);

  function TableBase() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "id", _this.props.id || "table-" + (0, _utils.generateId)());

    _defineProperty(_assertThisInitialized(_this), "titleId", _this.id + "-title");

    return _this;
  }

  var _proto = TableBase.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        columns = _this$props.columns,
        data = _this$props.data,
        density = _this$props.density,
        hideHeader = _this$props.hideHeader,
        hideTitle = _this$props.hideTitle,
        highContrast = _this$props.highContrast,
        isSortable = _this$props.isSortable,
        messages = _this$props.messages,
        rowKey = _this$props.rowKey,
        scrollable = _this$props.scrollable,
        selectable = _this$props.selectable,
        sortable = _this$props.sortable,
        striped = _this$props.striped,
        title = _this$props.title,
        titleAppearance = _this$props.titleAppearance,
        titleAs = _this$props.titleAs,
        rootProps = _objectWithoutPropertiesLoose(_this$props, ["columns", "data", "density", "hideHeader", "hideTitle", "highContrast", "isSortable", "messages", "rowKey", "scrollable", "selectable", "sortable", "striped", "title", "titleAppearance", "titleAs"]);

    var appearanceProps = {
      density: density,
      highContrast: highContrast,
      striped: striped
    };
    var tableHeaderRowProps = {
      checked: selectable && selectable.all,
      columns: columns,
      indeterminate: selectable && selectable.some,
      isSortable: isSortable,
      messages: messages,
      sortable: sortable,
      toggle: selectable && selectable.toggleAll
    };
    var table = (0, _core.jsx)(_TableContext.default.Provider, {
      value: appearanceProps
    }, (0, _core.jsx)(_styled.TableRoot, rootProps, (0, _core.jsx)(_TableTitle.default, {
      appearance: titleAppearance,
      as: titleAs,
      hide: hideTitle,
      id: this.titleId
    }, title), (0, _core.jsx)(_TableHeader.default, {
      hide: hideHeader
    }, (0, _core.jsx)(_TableHeaderRow.default, tableHeaderRowProps)), (0, _core.jsx)(_styled.TableBody, null, data.map(function (rowData, index) {
      var rowProps = {
        checked: selectable && selectable.isSelected(rowData),
        columns: columns,
        data: rowData,
        messages: messages,
        rowIndex: index,
        toggle: selectable && selectable.toggle
      };
      return (0, _core.jsx)(_TableDataRow.default, _extends({
        key: rowData[rowKey] || index
      }, rowProps));
    }))));

    if (scrollable) {
      var containerProps = {
        'aria-labelledby': this.titleId,
        role: 'group',
        scrollX: true
      };
      table = (0, _core.jsx)(_styled.TableOverflowContainer, containerProps, table);
    }

    return table;
  };

  return TableBase;
}(_react.Component);

exports.default = TableBase;

_defineProperty(TableBase, "displayName", 'TableBase');

_defineProperty(TableBase, "defaultProps", {
  density: _constants.DENSITY.compact,
  scrollable: true,
  titleAs: _constants.TITLE_ELEMENT.h4
});