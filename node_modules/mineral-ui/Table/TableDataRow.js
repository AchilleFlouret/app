"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

var _TableSelectableCell = _interopRequireDefault(require("./TableSelectableCell"));

var _TableCell = _interopRequireDefault(require("./TableCell"));

var _TableRow = _interopRequireDefault(require("./TableRow"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TableDataRow =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(TableDataRow, _Component);

  function TableDataRow() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "toggle", function () {
      var toggle = _this.props.toggle;
      toggle && toggle(_this.props.data);
    });

    return _this;
  }

  var _proto = TableDataRow.prototype;

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return !(0, _reactFastCompare.default)(this.props, nextProps);
  };

  _proto.render = function render() {
    var _this$props = this.props,
        checked = _this$props.checked,
        columns = _this$props.columns,
        data = _this$props.data,
        messages = _this$props.messages,
        rowIndex = _this$props.rowIndex,
        toggle = _this$props.toggle,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["checked", "columns", "data", "messages", "rowIndex", "toggle"]);

    var selectable = Boolean(toggle);
    var cells = columns.map(function (_ref) {
      var render = _ref.cell,
          key = _ref.key,
          restColumn = _objectWithoutPropertiesLoose(_ref, ["cell", "key"]);

      var ignoreContent = restColumn.content,
          ignoreLabel = restColumn.label,
          column = _objectWithoutPropertiesLoose(restColumn, ["content", "label"]);

      var cellProps = _objectSpread({
        children: data[key],
        columnKey: key,
        rowIndex: rowIndex,
        key: key,
        render: render
      }, column);

      return (0, _core.jsx)(_TableCell.default, _extends({
        key: key
      }, cellProps));
    });

    if (selectable) {
      cells.unshift((0, _core.jsx)(_TableSelectableCell.default, {
        checked: checked,
        disabled: data.disabled,
        key: "selectable",
        label: checked ? messages.deselectRow : messages.selectRow,
        onChange: this.toggle
      }));
    }

    var rowProps = _objectSpread({
      children: cells,
      isSelected: checked,
      isSelectable: selectable
    }, data.row ? {
      render: data.row
    } : undefined, {
      rowIndex: rowIndex
    }, restProps);

    return (0, _core.jsx)(_TableRow.default, rowProps);
  };

  return TableDataRow;
}(_react.Component);

exports.default = TableDataRow;

_defineProperty(TableDataRow, "displayName", 'TableDataRow');