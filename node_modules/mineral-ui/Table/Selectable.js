"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = require("react");

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Selectable =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Selectable, _Component);

  function Selectable() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      selected: _this.props.defaultSelected || []
    });

    _defineProperty(_assertThisInitialized(_this), "toggle", function (item) {
      if (_this.isControlled('selected')) {
        _this.toggleActions(item);
      } else {
        _this.setState(function (prevState) {
          var selected = prevState.selected.slice(0);
          var index = selected.indexOf(item);
          var hasItem = index !== -1;
          hasItem ? selected.splice(index, 1) : selected.push(item);
          return {
            selected: selected
          };
        }, function () {
          _this.toggleActions(item);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toggleActions", function (item) {
      var onToggle = _this.props.onToggle;
      onToggle && onToggle(item, _this.isSelected(item));
    });

    _defineProperty(_assertThisInitialized(_this), "toggleAll", function () {
      var none = _this.noneSelected();

      if (_this.isControlled('selected')) {
        _this.toggleAllActions(none);
      } else {
        _this.setState({
          selected: none ? _this.props.data : []
        }, function () {
          _this.toggleAllActions(none);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toggleAllActions", function (none) {
      var _this$props = _this.props,
          data = _this$props.data,
          onToggleAll = _this$props.onToggleAll;
      onToggleAll && onToggleAll(none ? data : [], none);
    });

    _defineProperty(_assertThisInitialized(_this), "allSelected", function () {
      var selected = _this.getControllableValue('selected');

      return selected && selected.length === _this.props.data.length;
    });

    _defineProperty(_assertThisInitialized(_this), "noneSelected", function () {
      var selected = _this.getControllableValue('selected');

      return selected && selected.length === 0;
    });

    _defineProperty(_assertThisInitialized(_this), "someSelected", function () {
      var selected = _this.getControllableValue('selected');

      var all = _this.allSelected();

      return selected && selected.length > 0 && !all;
    });

    _defineProperty(_assertThisInitialized(_this), "isSelected", function (item) {
      var selected = _this.getControllableValue('selected');

      return selected && selected.indexOf(item) !== -1;
    });

    _defineProperty(_assertThisInitialized(_this), "isControlled", function (prop) {
      return _this.props.hasOwnProperty(prop);
    });

    _defineProperty(_assertThisInitialized(_this), "getControllableValue", function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    });

    return _this;
  }

  Selectable.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    if (nextProps.selected !== undefined && !(0, _reactFastCompare.default)(nextProps.selected, prevState.selected)) {
      return {
        selected: nextProps.selected
      };
    }

    return null; // no change
  };

  var _proto = Selectable.prototype;

  _proto.render = function render() {
    var props = _objectSpread({}, this.props, {
      selectable: _objectSpread({}, this.state, {
        all: this.allSelected(),
        none: this.noneSelected(),
        some: this.someSelected(),
        isSelected: this.isSelected,
        toggle: this.toggle,
        toggleAll: this.toggleAll
      })
    });

    return this.props.children(props);
  };

  return Selectable;
}(_react.Component);

exports.default = Selectable;

_defineProperty(Selectable, "displayName", 'Selectable');