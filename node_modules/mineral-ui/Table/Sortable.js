"use strict";

exports.__esModule = true;
exports.default = exports.defaultSortComparator = void 0;

var _react = require("react");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var normalizedValue = function normalizedValue(value) {
  return value === null || value === undefined ? '' : typeof value === 'string' ? value.toUpperCase() : value;
};

var defaultSortComparator = function defaultSortComparator(a, b, key) {
  var valueA = normalizedValue(a[key]);
  var valueB = normalizedValue(b[key]);
  return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;
};

exports.defaultSortComparator = defaultSortComparator;

var Sortable =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Sortable, _Component);

  function Sortable() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      sort: _this.props.defaultSort
    });

    _defineProperty(_assertThisInitialized(_this), "sort", function (sort) {
      if (_this.isControlled('sort')) {
        _this.sortActions(sort);
      } else {
        _this.setState({
          sort: sort
        }, function () {
          _this.sortActions(sort);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "sortActions", function (sort) {
      var onSort = _this.props.onSort;
      onSort && onSort(sort);
    });

    _defineProperty(_assertThisInitialized(_this), "sortData", function () {
      var _this$props = _this.props,
          comparators = _this$props.comparators,
          data = _this$props.data;

      var sort = _this.getControllableValue('sort');

      var sortComparator = comparators && comparators[sort.key] || _this.props.sortComparator;
      return data.slice(0).sort(function (a, b) {
        var asc = sortComparator(a, b, sort.key);
        var desc = asc * -1;
        return sort.descending ? desc : asc;
      });
    });

    _defineProperty(_assertThisInitialized(_this), "isControlled", function (prop) {
      return _this.props.hasOwnProperty(prop);
    });

    _defineProperty(_assertThisInitialized(_this), "getControllableValue", function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    });

    return _this;
  }

  var _proto = Sortable.prototype;

  _proto.render = function render() {
    var sort = this.getControllableValue('sort');
    var isControlled = this.isControlled('sort');

    var props = _objectSpread({}, this.props, {
      sortable: {
        data: sort && !isControlled ? this.sortData() : this.props.data,
        sort: sort,
        sortFn: this.sort
      }
    });

    return this.props.children(props);
  };

  return Sortable;
}(_react.Component);

exports.default = Sortable;

_defineProperty(Sortable, "displayName", 'Sortable');

_defineProperty(Sortable, "defaultProps", {
  sortComparator: defaultSortComparator
});