"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireDefault(require("react"));

var _themes = require("../themes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var textWithThemeOverrides = function textWithThemeOverrides(_ref) {
  var appearance = _ref.appearance,
      _ref$as = _ref.as,
      as = _ref$as === void 0 ? 'h4' : _ref$as,
      children = _ref.children,
      textComponent = _ref.textComponent,
      displayName = _ref.displayName,
      theme = _ref.theme;
  var Text = textComponent;
  var textProps = {
    appearance: appearance,
    as: as,
    noMargins: true
  };
  var content = (0, _core.jsx)(Text, textProps, children);

  if (theme[displayName + "_color"] !== undefined || theme[displayName + "_fontSize"] !== undefined || theme[displayName + "_fontWeight"] !== undefined) {
    var appliedAppearance = appearance || as; // prettier-ignore

    var getOverride = function getOverride(variable) {
      var _ref2;

      return theme[displayName + "_" + variable] !== undefined ? (_ref2 = {}, _ref2["Text_" + variable + "_" + appliedAppearance] = theme[displayName + "_" + variable], _ref2) : undefined;
    };

    var textTheme = _objectSpread({}, getOverride('color'), getOverride('fontSize'), getOverride('fontWeight'));

    content = (0, _core.jsx)(_themes.ThemeProvider, {
      theme: textTheme
    }, content);
  }

  return content;
};

var _default = textWithThemeOverrides;
exports.default = _default;