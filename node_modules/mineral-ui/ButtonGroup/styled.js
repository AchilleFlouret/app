"use strict";

exports.__esModule = true;
exports.ButtonGroupRoot = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _styles = require("../styles");

var _emotion = require("../utils/emotion");

var _themes = require("./themes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ButtonGroupRoot = (
/*#__PURE__*/
0, _styledBase.default)('div', {
  target: "e13l5im40"
})(function (_ref) {
  var _ref2, _buttonNotLast, _ariaCheckedFa, _notFocus, _ariaCheckedTr, _ariaCheckedTr2, _objectSpread2;

  var fullWidth = _ref.fullWidth,
      baseTheme = _ref.theme,
      variant = _ref.variant;
  var theme = (0, _themes.buttonGroupTheme)(baseTheme);

  if (variant) {
    // prettier-ignore
    theme = _objectSpread({}, theme, {
      ButtonGroupButton_borderColor_active: theme["borderColor_" + variant + "_active"],
      ButtonGroupButton_borderColor_hover: theme["borderColor_" + variant + "_hover"]
    });
  }

  var _theme = theme,
      direction = _theme.direction;
  var rtl = direction === 'rtl';
  var start = rtl ? 'Right' : 'Left';
  var end = rtl ? 'Left' : 'Right';
  var borderStartColorProperty = "border" + start + "Color";
  var borderEndColorProperty = "border" + end + "Color";
  var borderBottomStartRadiusProperty = "borderBottom" + start + "Radius";
  var borderBottomEndRadiusProperty = "borderBottom" + end + "Radius";
  var borderTopStartRadiusProperty = "borderTop" + start + "Radius";
  var borderTopEndRadiusProperty = "borderTop" + end + "Radius";
  return _objectSpread({}, (0, _styles.componentStyleReset)(baseTheme), (_objectSpread2 = {
    display: 'flex',
    '& button': {
      flexGrow: fullWidth && 1,
      '&:focus, &:active': {
        position: 'relative'
      },
      '&:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])': {
        borderColor: theme.ButtonGroupButton_borderColor_hover,
        '&[data-variant="danger"]': {
          borderColor: theme.borderColor_danger_hover
        },
        '&[data-variant="success"]': {
          borderColor: theme.borderColor_success_hover
        },
        '&[data-variant="warning"]': {
          borderColor: theme.borderColor_warning_hover
        }
      },
      '&:active:not(:focus):not([aria-checked=true]):not([disabled])': {
        borderColor: theme.ButtonGroupButton_borderColor_active,
        '&[data-variant="danger"]': {
          borderColor: theme.borderColor_danger_active
        },
        '&[data-variant="success"]': {
          borderColor: theme.borderColor_success_active
        },
        '&[data-variant="warning"]': {
          borderColor: theme.borderColor_warning_active
        }
      },
      '&[disabled]': {
        border: theme.ButtonGroupButton_border_disabled,
        '&[aria-checked=true]': {
          backgroundColor: theme.ButtonGroupButton_backgroundColor_checkedDisabled,
          color: theme.ButtonGroupButton_color_checkedDisabled,
          '&:hover': {
            color: theme.ButtonGroupButton_color_checkedDisabled
          }
        }
      }
    }
  }, _objectSpread2['& > button:not(:first-child), & > *:not(:first-child) button' + _emotion.ignoreSsrWarning] = (_ref2 = {}, _ref2[borderBottomStartRadiusProperty] = 0, _ref2[borderTopStartRadiusProperty] = 0, _ref2), _objectSpread2['& > button:not(:last-child), & > *:not(:last-child) button'] = (_buttonNotLast = {}, _buttonNotLast[borderBottomEndRadiusProperty] = 0, _buttonNotLast[borderTopEndRadiusProperty] = 0, _buttonNotLast[borderEndColorProperty] = 'transparent', _buttonNotLast), _objectSpread2['& > [aria-checked=false], & > button:not([aria-checked]), & > *:not([aria-checked]) button'] = {
    '&:focus, & button:focus': {
      borderLeftColor: theme.ButtonGroupButton_borderStartColor,
      borderRightColor: theme.ButtonGroupButton_borderStartColor
    }
  }, _objectSpread2['& > [aria-checked=false] + [aria-checked=false]:not(:focus)'] = (_ariaCheckedFa = {}, _ariaCheckedFa[borderStartColorProperty] = theme.ButtonGroupButton_borderStartColor, _ariaCheckedFa), _objectSpread2['& > [aria-checked=false]:not([disabled]):hover + [aria-checked=false], & > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]), & > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button'] = {
    '&:not(:focus)': (_notFocus = {}, _notFocus[borderStartColorProperty] = 'transparent', _notFocus)
  }, _objectSpread2['& > [aria-checked=true] + [aria-checked=false]:not(:focus)'] = (_ariaCheckedTr = {}, _ariaCheckedTr[borderStartColorProperty] = 'transparent', _ariaCheckedTr), _objectSpread2['& > [aria-checked=true] + [aria-checked=true]:not(:focus)'] = (_ariaCheckedTr2 = {}, _ariaCheckedTr2[borderStartColorProperty] = theme.ButtonGroupButton_borderStartColor_checked, _ariaCheckedTr2), _objectSpread2));
});
exports.ButtonGroupRoot = ButtonGroupRoot;