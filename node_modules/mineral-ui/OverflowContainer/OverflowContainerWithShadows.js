"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _styled = require("./styled");

var _Scroller = _interopRequireDefault(require("./Scroller"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var OverflowContainerWithShadows =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(OverflowContainerWithShadows, _Component);

  function OverflowContainerWithShadows() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "container", void 0);

    _defineProperty(_assertThisInitialized(_this), "setContainerRef", function (node) {
      _this.container = node;
    });

    _defineProperty(_assertThisInitialized(_this), "handleScroll", function (event) {
      _this.applyShadows(event.currentTarget);
    });

    _defineProperty(_assertThisInitialized(_this), "applyShadows", (0, _lodash.default)(function (element) {
      var _this$props = _this.props,
          scrollX = _this$props.scrollX,
          scrollY = _this$props.scrollY;

      if (scrollX) {
        _this.setState({
          hasShadowLeft: element.scrollLeft > 0,
          hasShadowRight: element.scrollLeft + element.clientWidth < element.scrollWidth
        });
      }

      if (scrollY) {
        _this.setState({
          hasShadowTop: element.scrollTop > 0,
          hasShadowBottom: element.scrollTop + element.clientHeight < element.scrollHeight
        });
      }
    }, 100, {
      leading: true
    }));

    return _this;
  }

  var _proto = OverflowContainerWithShadows.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.applyShadows(this.container);
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        children = _this$props2.children,
        hideScrollbars = _this$props2.hideScrollbars,
        scrollX = _this$props2.scrollX,
        scrollY = _this$props2.scrollY,
        restProps = _objectWithoutPropertiesLoose(_this$props2, ["children", "hideScrollbars", "scrollX", "scrollY"]);

    var isScrollable = Boolean(this.state && Object.keys(this.state).filter(function (key) {
      return _this2.state[key];
    }).length);

    var rootProps = _objectSpread({}, this.state, restProps);

    var scrollerProps = {
      hideScrollbars: hideScrollbars,
      containerRef: this.setContainerRef,
      onScroll: (scrollX || scrollY) && this.handleScroll,
      scrollX: scrollX,
      scrollY: scrollY,
      // Set tabIndex when scrollable so user can scroll with keyboard
      tabIndex: isScrollable ? 0 : undefined
    };
    return (0, _core.jsx)(_styled.OverflowContainerWithShadowsRoot, rootProps, (0, _core.jsx)(_Scroller.default, scrollerProps, children));
  };

  return OverflowContainerWithShadows;
}(_react.Component);

exports.default = OverflowContainerWithShadows;

_defineProperty(OverflowContainerWithShadows, "displayName", 'OverflowContainerWithShadows');