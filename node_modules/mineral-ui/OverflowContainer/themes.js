"use strict";

exports.__esModule = true;
exports.overflowContainerWithShadowsTheme = exports.overflowContainerTheme = void 0;

var _themes = require("../themes");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// prettier-ignore
var overflowContainerTheme = function overflowContainerTheme(baseTheme) {
  return _objectSpread({
    OverflowContainer_outline_focus: "1px solid " + baseTheme.borderColor_theme_focus
  }, baseTheme);
}; // prettier-ignore
// $FlowFixMe - strict theme keys incompatible with mapComponentThemes


exports.overflowContainerTheme = overflowContainerTheme;

var overflowContainerWithShadowsTheme = function overflowContainerWithShadowsTheme(baseTheme) {
  return (0, _themes.mapComponentThemes)({
    name: 'OverflowContainer',
    theme: overflowContainerTheme(baseTheme)
  }, {
    name: 'OverflowContainerWithShadows',
    theme: {
      OverflowContainerWithShadows_boxShadowBottom: "inset 0 -8px 8px -8px " + baseTheme.color_gray_60 + ", inset 0 -1px " + baseTheme.borderColor,
      OverflowContainerWithShadows_boxShadowLeft: "inset 8px 0 8px -8px " + baseTheme.color_gray_60 + ", inset 1px 0 " + baseTheme.borderColor,
      OverflowContainerWithShadows_boxShadowRight: "inset -8px 0 8px -8px " + baseTheme.color_gray_60 + ", inset -1px 0 " + baseTheme.borderColor,
      OverflowContainerWithShadows_boxShadowTop: "inset 0 8px 8px -8px " + baseTheme.color_gray_60 + ", inset 0 1px " + baseTheme.borderColor
    }
  }, baseTheme);
};

exports.overflowContainerWithShadowsTheme = overflowContainerWithShadowsTheme;