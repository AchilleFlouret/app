"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _styled = require("./styled");

var _constants = require("./constants");

var _propTypes = require("./propTypes");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Avatar =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Avatar, _Component);

  function Avatar() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Avatar.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        abbr = _this$props.abbr,
        children = _this$props.children,
        size = _this$props.size,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["abbr", "children", "size"]);

    var icon, noBackground, text;

    _react.Children.map(children, function (child) {
      if (typeof child === 'string') {
        text = abbr || child.length > 1 ? (0, _core.jsx)("abbr", {
          title: child
        }, abbr || child.charAt(0)) : (0, _core.jsx)("span", null, child);
      } else if (child.type && child.type.displayName && child.type.displayName.indexOf('Icon') !== -1) {
        icon = (0, _react.cloneElement)(child, {
          size: _constants.ICON_SIZE[size || Avatar.defaultProps.size]
        });
      } else {
        noBackground = true;
      }
    });

    var rootProps = _objectSpread({
      icon: icon,
      noBackground: noBackground,
      size: size
    }, restProps);

    return (0, _core.jsx)(_styled.AvatarRoot, rootProps, text || icon || children);
  };

  return Avatar;
}(_react.Component);

exports.default = Avatar;

_defineProperty(Avatar, "displayName", 'Avatar');

_defineProperty(Avatar, "defaultProps", {
  shape: _constants.SHAPE.circle,
  size: _constants.SIZE.large
});

Avatar.propTypes = process.env.NODE_ENV !== "production" ? _propTypes.avatarPropTypes : {};