import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Children, cloneElement, Component } from 'react';
import { Reference } from 'react-popper';
import withForwardRef from "../utils/withForwardRef";
import { PopoverTriggerWrapper } from "./styled";

var PopoverTrigger =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(PopoverTrigger, _Component);

  function PopoverTrigger() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = PopoverTrigger.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        cursor = _this$props.cursor,
        forwardedRef = _this$props.forwardedRef,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["children", "cursor", "forwardedRef"]);

    return ___EmotionJSX(Reference, null, function (_ref) {
      var popperRef = _ref.ref;
      var popoverTriggerWrapperProps = {
        cursor: cursor,
        ref: function ref(node) {
          if (node !== null) {
            popperRef(node);
            forwardedRef && forwardedRef(node);
          }
        }
      };
      return ___EmotionJSX(PopoverTriggerWrapper, popoverTriggerWrapperProps, cloneElement(Children.only(children), restProps));
    });
  };

  return PopoverTrigger;
}(Component);

_defineProperty(PopoverTrigger, "displayName", 'PopoverTrigger');

export default withForwardRef(PopoverTrigger);