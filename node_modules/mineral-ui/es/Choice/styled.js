import _styled from "@emotion/styled-base";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import isPropValid from '@emotion/is-prop-valid';
import { componentStyleReset, getNormalizedValue } from "../styles";
import { choiceTheme, choiceGroupTheme } from "./themes";
export var ChoiceRoot =
/*#__PURE__*/
_styled('label', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return ['disabled', 'size'].indexOf(prop) === -1 && isPropValid(prop);
  },
  target: "erdol5x0"
})(function (_ref) {
  var disabled = _ref.disabled,
      justify = _ref.justify,
      hideLabel = _ref.hideLabel,
      labelPosition = _ref.labelPosition,
      size = _ref.size,
      baseTheme = _ref.theme;
  var theme = choiceTheme(baseTheme);
  var labelPositionStart = labelPosition === 'start';
  return _objectSpread({}, componentStyleReset(baseTheme), {
    alignItems: 'center',
    cursor: !disabled && 'pointer',
    display: 'flex',
    position: 'relative',
    flexDirection: labelPositionStart && 'row-reverse',
    justifyContent: !justify && (labelPositionStart ? 'flex-end' : 'flex-start'),
    '&:hover': {
      '& span:first-of-type': {
        borderColor: !disabled && theme.ChoiceControl_borderColor_hover
      }
    }
  }, hideLabel ? {
    '&::after': {
      content: "'.'",
      fontSize: size === 'small' ? theme.ChoiceText_fontSize_small : theme.ChoiceText_fontSize,
      visibility: 'hidden',
      width: '0.1px'
    }
  } : undefined);
});
export var Input =
/*#__PURE__*/
_styled('input', {
  target: "erdol5x1"
})(function (_ref2) {
  var baseTheme = _ref2.theme;
  var theme = choiceTheme(baseTheme);
  return _objectSpread({}, {
    border: "0",
    clip: "rect(0 0 0 0)",
    clipPath: "inset(50%)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: "0",
    position: "absolute",
    whiteSpace: "nowrap",
    width: "1px"
  }, {
    '&:focus': {
      '& + span': {
        boxShadow: theme.ChoiceControl_boxShadow_focus
      }
    },
    '&:checked,&[type="checkbox"]:indeterminate': {
      '& + span': {
        backgroundColor: theme.ChoiceControl_backgroundColor_checked,
        borderColor: theme.ChoiceControl_borderColor_checked
      },
      '&:hover': {
        '& + span': {
          backgroundColor: theme.ChoiceControl_backgroundColor_checkedHover,
          borderColor: theme.ChoiceControl_borderColor_checkedHover
        }
      },
      '&:disabled': {
        '& + span': {
          backgroundColor: theme.ChoiceControl_borderColor,
          borderColor: theme.ChoiceControl_borderColor,
          color: theme.ChoiceControl_backgroundColor
        }
      }
    }
  });
});
export var Text =
/*#__PURE__*/
_styled('span', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return ['disabled', 'size'].indexOf(prop) === -1 && isPropValid(prop);
  },
  target: "erdol5x2"
})(function (_ref3) {
  var disabled = _ref3.disabled,
      hideLabel = _ref3.hideLabel,
      justify = _ref3.justify,
      labelPosition = _ref3.labelPosition,
      size = _ref3.size,
      baseTheme = _ref3.theme;
  var theme = choiceTheme(baseTheme);
  var rtl = theme.direction === 'rtl';
  var labelPositionStart = labelPosition === 'start';
  var fontSize = size === 'small' ? theme.ChoiceText_fontSize_small : theme.ChoiceText_fontSize;
  var marginHorizontal = justify ? 'auto' : getNormalizedValue(theme.ChoiceText_marginHorizontal, fontSize);
  return _objectSpread({
    color: disabled ? theme.color_disabled : theme.ChoiceText_color,
    fontSize: fontSize,
    marginLeft: labelPositionStart && !rtl || !labelPositionStart && rtl ? 0 : marginHorizontal,
    marginRight: labelPositionStart && !rtl || !labelPositionStart && rtl ? marginHorizontal : 0
  }, hideLabel ? {
    border: "0",
    clip: "rect(0 0 0 0)",
    clipPath: "inset(50%)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: "0",
    position: "absolute",
    whiteSpace: "nowrap",
    width: "1px"
  } : undefined);
});
export var Control =
/*#__PURE__*/
_styled('span', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return ['disabled', 'size'].indexOf(prop) === -1 && isPropValid(prop);
  },
  target: "erdol5x3"
})(function (_ref4) {
  var disabled = _ref4.disabled,
      size = _ref4.size,
      baseTheme = _ref4.theme;
  var theme = choiceTheme(baseTheme);
  var backgroundColor = disabled ? theme.input_backgroundColor_disabled : theme.ChoiceControl_backgroundColor;
  var controlDimensions = size === 'jumbo' ? theme.ChoiceControl_size_jumbo : theme.ChoiceControl_size;
  return {
    alignItems: 'center',
    backgroundColor: backgroundColor,
    borderColor: theme.ChoiceControl_borderColor,
    borderRadius: theme.ChoiceControl_borderRadius,
    borderStyle: 'solid',
    borderWidth: '1px',
    color: backgroundColor,
    content: '""',
    display: 'flex',
    flex: 'none',
    height: controlDimensions,
    justifyContent: 'center',
    width: controlDimensions,
    '& svg': {
      fill: 'currentColor',
      height: 'auto',
      width: '100%'
    }
  };
});
export var ChoiceGroupRoot =
/*#__PURE__*/
_styled('div', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'size' && isPropValid(prop);
  },
  target: "erdol5x4"
})(function (_ref5) {
  var inline = _ref5.inline,
      size = _ref5.size,
      baseTheme = _ref5.theme;
  var theme = choiceGroupTheme(baseTheme);
  return _objectSpread({}, componentStyleReset(baseTheme), {
    display: 'flex',
    flexDirection: inline ? 'row' : 'column',
    '& > *:not(:last-child)': {
      marginBottom: inline ? 0 : size === 'jumbo' ? theme.ChoiceGroupControl_marginVertical_stackedJumbo : theme.ChoiceGroupControl_marginVertical_stacked,
      marginRight: inline ? theme.ChoiceGroupControl_marginHorizontal_inline : undefined
    }
  });
});