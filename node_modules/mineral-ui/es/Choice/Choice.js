import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import { LABEL_POSITION, SIZE } from "./constants";
import { ChoiceRoot as Root, Control, Input, Text } from "./styled";

var Choice =
/*#__PURE__*/
function (_PureComponent) {
  _inheritsLoose(Choice, _PureComponent);

  function Choice() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = Choice.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        className = _this$props.className,
        disabled = _this$props.disabled,
        hideLabel = _this$props.hideLabel,
        iconChecked = _this$props.iconChecked,
        inputRef = _this$props.inputRef,
        invalid = _this$props.invalid,
        justify = _this$props.justify,
        label = _this$props.label,
        labelPosition = _this$props.labelPosition,
        required = _this$props.required,
        otherRootProps = _this$props.rootProps,
        size = _this$props.size,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["className", "disabled", "hideLabel", "iconChecked", "inputRef", "invalid", "justify", "label", "labelPosition", "required", "rootProps", "size"]);

    var rootProps = _objectSpread({
      className: className,
      disabled: disabled,
      justify: justify,
      hideLabel: hideLabel,
      labelPosition: labelPosition,
      size: size
    }, otherRootProps);

    var inputProps = _objectSpread({
      'aria-invalid': invalid,
      'aria-required': required,
      disabled: disabled,
      ref: function ref(_ref) {
        if (inputRef) {
          inputRef(_ref);
        }
      },
      required: required
    }, restProps);

    var controlProps = {
      disabled: disabled,
      size: size
    };
    var textProps = {
      disabled: disabled,
      hideLabel: hideLabel,
      justify: justify,
      labelPosition: labelPosition,
      size: size
    };
    return ___EmotionJSX(Root, rootProps, ___EmotionJSX(Input, inputProps), ___EmotionJSX(Control, controlProps, iconChecked), ___EmotionJSX(Text, textProps, label));
  };

  return Choice;
}(PureComponent);

_defineProperty(Choice, "displayName", 'Choice');

_defineProperty(Choice, "defaultProps", {
  labelPosition: LABEL_POSITION.end,
  size: SIZE.large
});

export { Choice as default };