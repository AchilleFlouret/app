import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Children, cloneElement, createElement } from 'react';
import { ChoiceGroupRoot as Root } from "./styled";
import { SIZE, TYPE } from "./constants";

var isChecked = function isChecked(checked, value) {
  return Array.isArray(checked) ? checked.indexOf(value) !== -1 : checked === value;
};

var ChoiceGroup = function ChoiceGroup(props) {
  var checked = props.checked,
      children = props.children,
      data = props.data,
      defaultChecked = props.defaultChecked,
      inline = props.inline,
      input = props.input,
      invalid = props.invalid,
      required = props.required,
      role = props.role,
      otherRootProps = props.rootProps,
      size = props.size,
      type = props.type,
      restProps = _objectWithoutPropertiesLoose(props, ["checked", "children", "data", "defaultChecked", "inline", "input", "invalid", "required", "role", "rootProps", "size", "type"]);

  var rootProps = _objectSpread({
    inline: inline,
    role: role,
    size: size
  }, otherRootProps);

  var inputProps = function inputProps(value, index, inputData) {
    if (inputData === void 0) {
      inputData = {};
    }

    return _objectSpread({
      checked: checked !== undefined ? isChecked(checked, value) : undefined,
      defaultChecked: defaultChecked !== undefined ? isChecked(defaultChecked, value) : undefined,
      invalid: type === TYPE.checkbox ? undefined : invalid,
      key: index,
      required: type === TYPE.checkbox ? undefined : required,
      size: size
    }, restProps, inputData);
  };

  var inputs = null;

  if (data && input) {
    inputs = data.map(function (inputData, index) {
      return createElement(input, inputProps(inputData.value, index, inputData));
    });
  } else if (children) {
    inputs = Children.map(children, function (child, index) {
      return cloneElement(child, inputProps(child.props.value, index));
    });
  }

  return ___EmotionJSX(Root, rootProps, inputs);
};

var defaultProps = {
  role: 'group',
  size: SIZE.large
};
ChoiceGroup.displayName = 'ChoiceGroup';
ChoiceGroup.defaultProps = defaultProps;
export default ChoiceGroup;