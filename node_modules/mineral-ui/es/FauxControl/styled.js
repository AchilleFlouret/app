import _styled from "@emotion/styled-base";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import isPropValid from '@emotion/is-prop-valid';
import { componentStyleReset, getNormalizedValue } from "../styles";
import { fauxControlTheme } from "./themes";
export var FauxControlRoot =
/*#__PURE__*/
_styled('div', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'disabled' && isPropValid(prop);
  },
  target: "e9lzmb40"
})(function (_ref) {
  var disabled = _ref.disabled,
      baseTheme = _ref.theme,
      variant = _ref.variant;
  var theme = fauxControlTheme(baseTheme);

  if (variant) {
    // prettier-ignore
    theme = _objectSpread({}, theme, {
      FauxControl_borderColor_hover: theme["borderColor_" + variant + "_hover"],
      FauxControl_boxShadow_active: "0 0 0 1px " + theme.boxShadow_focusInner + ", 0 0 0 2px " + theme["borderColor_" + variant + "_active"],
      FauxControl_boxShadow_focus: "0 0 0 1px " + theme.boxShadow_focusInner + ", 0 0 0 2px " + theme["borderColor_" + variant + "_focus"]
    });
  }

  return _objectSpread({}, componentStyleReset(baseTheme), {
    position: 'relative',
    zIndex: 1,
    '&:hover': {
      '& > div:last-child': {
        borderColor: !disabled ? theme.FauxControl_borderColor_hover : null
      }
    },
    '&:focus': {
      '& > div:last-child': {
        borderColor: !disabled ? theme.FauxControl_borderColor_focus : null,
        boxShadow: !disabled ? theme.FauxControl_boxShadow_focus : null
      }
    },
    '&:active': {
      '& > div:last-child': {
        borderColor: theme.FauxControl_borderColor_active,
        boxShadow: disabled ? 'none' : theme.FauxControl_boxShadow_active
      }
    }
  });
});
export var Prefix =
/*#__PURE__*/
_styled('span', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'size' && isPropValid(prop);
  },
  target: "e9lzmb41"
})(function (_ref2) {
  var iconStart = _ref2.iconStart,
      size = _ref2.size,
      baseTheme = _ref2.theme;
  var theme = fauxControlTheme(baseTheme);
  var rtl = theme.direction === 'rtl';
  var fontSize = size === 'small' ? theme.FauxControl_fontSize_small : theme.FauxControl_fontSize;
  var marginWithIcon = getNormalizedValue(theme.FauxControl_paddingHorizontal, fontSize);
  var marginWithoutIcon = getNormalizedValue(parseFloat(theme.FauxControlIcon_marginHorizontal) / 2 + "em", fontSize);
  return _objectSpread({
    flex: '0 0 auto',
    fontSize: fontSize,
    marginLeft: rtl ? marginWithoutIcon : iconStart ? 0 : marginWithIcon,
    marginRight: rtl ? iconStart ? 0 : marginWithIcon : marginWithoutIcon,
    whiteSpace: 'nowrap'
  }, {
    display: "inline-block",
    maxWidth: "8em",
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    wordWrap: "normal"
  });
});
export var Suffix =
/*#__PURE__*/
_styled('span', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'size' && isPropValid(prop);
  },
  target: "e9lzmb42"
})(function (_ref3) {
  var iconEnd = _ref3.iconEnd,
      size = _ref3.size,
      baseTheme = _ref3.theme,
      variant = _ref3.variant;
  var theme = fauxControlTheme(baseTheme);
  var rtl = theme.direction === 'rtl';
  var fontSize = size === 'small' ? theme.FauxControl_fontSize_small : theme.FauxControl_fontSize;
  var marginWithIcon = getNormalizedValue(theme.FauxControl_paddingHorizontal, fontSize);
  var marginWithoutIcon = getNormalizedValue(parseFloat(theme.FauxControlIcon_marginHorizontal) / 2 + "em", fontSize);
  return _objectSpread({
    flex: '0 0 auto',
    fontSize: fontSize,
    marginLeft: rtl ? iconEnd || variant ? 0 : marginWithIcon : marginWithoutIcon,
    marginRight: rtl ? marginWithoutIcon : iconEnd || variant ? 0 : marginWithIcon,
    whiteSpace: 'nowrap'
  }, {
    display: "inline-block",
    maxWidth: "8em",
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    wordWrap: "normal"
  });
});
export var Underlay =
/*#__PURE__*/
_styled('div', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return ['disabled', 'readOnly'].indexOf(prop) === -1 && isPropValid(prop);
  },
  target: "e9lzmb43"
})(function (_ref4) {
  var disabled = _ref4.disabled,
      readOnly = _ref4.readOnly,
      baseTheme = _ref4.theme,
      variant = _ref4.variant;
  var theme = fauxControlTheme(baseTheme);
  return {
    backgroundColor: disabled || readOnly ? theme.input_backgroundColor_disabled : theme.FauxControl_backgroundColor,
    borderColor: variant && !disabled && !readOnly ? theme["borderColor_" + variant] : theme.FauxControl_borderColor,
    borderRadius: theme.FauxControl_borderRadius,
    borderStyle: 'solid',
    borderWidth: theme.FauxControl_borderWidth,
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    top: 0,
    zIndex: -1
  };
});
export var Control =
/*#__PURE__*/
_styled('input', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return ['as', 'prefix'].indexOf(prop) === -1;
  },
  target: "e9lzmb44"
})(function (_ref5) {
  var controlPropsIn = _ref5.controlPropsIn,
      controlSize = _ref5.controlSize,
      disabled = _ref5.disabled,
      hasPlaceholder = _ref5.hasPlaceholder,
      iconEnd = _ref5.iconEnd,
      iconStart = _ref5.iconStart,
      prefix = _ref5.prefix,
      readOnly = _ref5.readOnly,
      nonHtmlSize = _ref5.size,
      suffix = _ref5.suffix,
      baseTheme = _ref5.theme,
      variant = _ref5.variant;
  var theme = fauxControlTheme(baseTheme);
  var size = controlSize || nonHtmlSize;

  if (variant) {
    // prettier-ignore
    theme = _objectSpread({}, theme, {
      FauxControl_boxShadow_focus: "0 0 0 1px " + theme.boxShadow_focusInner + ", 0 0 0 2px " + theme["borderColor_" + variant + "_focus"]
    });
  }

  if (controlPropsIn.variant) {
    // prettier-ignore
    theme = _objectSpread({}, theme, {
      FauxControl_color: theme["color_" + controlPropsIn.variant]
    });
  }

  var rtl = theme.direction === 'rtl';
  var fontSize = size === 'small' ? theme.FauxControl_fontSize_small : theme.FauxControl_fontSize;
  var sizeAppropriateHorizontalPadding = size === 'small' || size === 'medium' ? theme.FauxControl_paddingHorizontal_small || theme.FauxControl_paddingHorizontal : theme.FauxControl_paddingHorizontal;
  var paddingWithoutIcon = getNormalizedValue(sizeAppropriateHorizontalPadding, fontSize);
  var color = theme.FauxControl_color;

  if (disabled) {
    color = theme.color_disabled;
  } else if (hasPlaceholder) {
    color = theme.FauxControl_color_placeholder;
  } else if (readOnly) {
    color = theme.FauxControl_color_readOnly;
  } // [1] - Safari and many Android browsers need this to apply the correct
  //       color to disabled controls


  var placeholderStyles = {
    color: theme.FauxControl_color_placeholder,
    WebkitTextFillColor: theme.FauxControl_color_placeholder,
    // [1]
    fontStyle: 'italic'
  };
  return {
    color: color,
    WebkitTextFillColor: color,
    // [1]
    fontSize: fontSize,
    fontStyle: hasPlaceholder ? 'italic' : null,
    outline: 0,
    paddingLeft: (iconStart || prefix) && !rtl || (iconEnd || variant || suffix) && rtl ? 0 : paddingWithoutIcon,
    paddingRight: (iconEnd || variant || suffix) && !rtl || (iconStart || prefix) && rtl ? 0 : paddingWithoutIcon,
    '&::placeholder': placeholderStyles,
    '&::-ms-input-placeholder': placeholderStyles,
    // Edge
    '&:-ms-input-placeholder': placeholderStyles,
    // IE 11
    '&::-ms-clear': {
      display: 'none'
    },
    '&:focus': {
      '& ~ div:last-child': {
        borderColor: theme.FauxControl_borderColor_focus,
        boxShadow: theme.FauxControl_boxShadow_focus
      }
    }
  };
});