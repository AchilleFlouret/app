import _styled from "@emotion/styled-base";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { componentStyleReset, getNormalizedValue } from "../styles";
import { formFieldTheme, formFieldDividerTheme, formFieldsetTheme } from "./themes";
export var FormFieldRoot =
/*#__PURE__*/
_styled('div', {
  target: "ec7jr0a0"
})(function (_ref) {
  var theme = _ref.theme;
  return componentStyleReset(theme);
});
export var FormFieldCaption =
/*#__PURE__*/
_styled('div', {
  target: "ec7jr0a1"
})(function (_ref2) {
  var isGroup = _ref2.isGroup,
      baseTheme = _ref2.theme,
      variant = _ref2.variant;
  var theme = formFieldTheme(baseTheme);

  if (variant) {
    // prettier-ignore
    theme = _objectSpread({}, theme, {
      FormFieldCaption_color: baseTheme["color_" + variant]
    });
  }

  var fontSize = theme.FormFieldCaption_fontSize;
  return {
    color: theme.FormFieldCaption_color,
    fontSize: fontSize,
    marginTop: isGroup ? getNormalizedValue(theme.FormFieldCaption_marginTop_isGroup, fontSize) : getNormalizedValue(theme.FormFieldCaption_marginTop, fontSize)
  };
});
export var FormFieldDividerRoot =
/*#__PURE__*/
_styled('div', {
  target: "ec7jr0a2"
})(function (_ref3) {
  var baseTheme = _ref3.theme;
  var theme = formFieldDividerTheme(baseTheme);
  return {
    backgroundColor: theme.FormFieldDivider_borderColor,
    height: theme.FormFieldDivider_borderWidth,
    margin: theme.FormFieldDivider_margin + " 0"
  };
});
export var FormFieldSecondaryText =
/*#__PURE__*/
_styled('span', {
  target: "ec7jr0a3"
})(function (_ref4) {
  var secondaryText = _ref4.secondaryText,
      baseTheme = _ref4.theme;
  var theme = formFieldTheme(baseTheme);
  return {
    color: secondaryText ? theme.FormFieldSecondaryText_color : theme.FormFieldSecondaryText_color_required,
    fontSize: theme.FormFieldSecondaryText_fontSize,
    fontWeight: theme.FormFieldSecondaryText_fontWeight
  };
});
export var FormFieldsetRoot =
/*#__PURE__*/
_styled('fieldset', {
  target: "ec7jr0a4"
})(function (_ref5) {
  var disabled = _ref5.disabled,
      baseTheme = _ref5.theme;
  var theme = formFieldsetTheme(baseTheme);
  return _objectSpread({}, componentStyleReset(baseTheme), {
    border: '1px solid transparent',
    borderTopColor: theme.FormFieldset_borderColor,
    padding: 0,
    '& > legend': {
      color: disabled ? theme.color_disabled : theme.FormFieldsetLegend_color,
      fontSize: theme.FormFieldsetLegend_fontSize,
      fontWeight: theme.FormFieldsetLegend_fontWeight,
      lineHeight: theme.size_medium,
      padding: 0,
      paddingLeft: theme.direction === 'rtl' ? theme.space_inline_sm : null,
      paddingRight: theme.direction === 'ltr' ? theme.space_inline_sm : null
    }
  });
});
export var FormFieldTextWrapper =
/*#__PURE__*/
_styled('div', {
  target: "ec7jr0a5"
})(function (_ref6) {
  var hideLabel = _ref6.hideLabel,
      baseTheme = _ref6.theme;
  var theme = formFieldTheme(baseTheme);
  return _objectSpread({
    color: theme.FormFieldLabel_color,
    display: 'flex',
    fontSize: theme.FormFieldLabel_fontSize,
    fontWeight: theme.FormFieldLabel_fontWeight,
    justifyContent: 'space-between',
    marginBottom: theme.FormFieldLabel_marginBottom
  }, hideLabel ? {
    border: "0",
    clip: "rect(0 0 0 0)",
    clipPath: "inset(50%)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: "0",
    position: "absolute",
    whiteSpace: "nowrap",
    width: "1px"
  } : {}, {
    '& > *': {
      alignSelf: 'flex-end',
      display: 'inline-block'
    }
  });
});