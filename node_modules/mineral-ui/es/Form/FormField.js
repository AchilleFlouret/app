import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Children, cloneElement, createElement, Component } from 'react';
import { generateId } from "../utils";
import { FormFieldRoot as Root, FormFieldCaption, FormFieldSecondaryText, FormFieldTextWrapper } from "./styled";
import { formFieldPropTypes } from "./propTypes";
var REGEX_GROUP = /(Checkbox|Radio|Group)/i;

var FormField =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(FormField, _Component);

  function FormField() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "id", _this.props.id || "formField-" + generateId());

    _defineProperty(_assertThisInitialized(_this), "getControlName", function () {
      var _this$props = _this.props,
          children = _this$props.children,
          input = _this$props.input;
      var controlName;

      if (input && input.displayName) {
        controlName = input.displayName;
      } else if (children) {
        var child = Children.only(children);

        if (child.type && child.type.displayName) {
          controlName = child.type.displayName;
        }
      }

      return controlName;
    });

    _defineProperty(_assertThisInitialized(_this), "isGroup", function () {
      var controlName = _this.getControlName();

      return controlName && REGEX_GROUP.test(controlName);
    });

    return _this;
  }

  var _proto = FormField.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        caption = _this$props2.caption,
        children = _this$props2.children,
        className = _this$props2.className,
        hideLabel = _this$props2.hideLabel,
        input = _this$props2.input,
        label = _this$props2.label,
        required = _this$props2.required,
        requiredText = _this$props2.requiredText,
        otherRootProps = _this$props2.rootProps,
        secondaryText = _this$props2.secondaryText,
        variant = _this$props2.variant,
        restProps = _objectWithoutPropertiesLoose(_this$props2, ["caption", "children", "className", "hideLabel", "input", "label", "required", "requiredText", "rootProps", "secondaryText", "variant"]);

    var rootProps = _objectSpread({
      className: className
    }, otherRootProps); // Label structure differs if input/control is a grouped control which has
    // its own label tag.  e.g. Radio, Checkbox, RadioGroup, CheckboxGroup


    var isGroup = this.isGroup();
    var Label = isGroup ? 'div' : 'label';
    var textWrapperProps = {
      hideLabel: hideLabel,
      key: this.id + "-textWrapper"
    };
    var labelTextProps = {
      id: this.id + "-labelText"
    };
    var captionProps = {
      caption: caption,
      isGroup: isGroup,
      variant: variant,
      id: this.id + "-caption"
    };

    var controlProps = function controlProps(props) {
      if (props === void 0) {
        props = {};
      }

      return _objectSpread({
        'aria-describedby': caption && captionProps.id,
        key: _this2.id + "-control",
        required: required,
        rootProps: isGroup ? _objectSpread({
          'aria-labelledby': labelTextProps.id,
          'aria-describedby': caption && captionProps.id
        }, props.rootProps) : props.rootProps,
        variant: variant
      }, restProps);
    };

    var control = null;

    if (input) {
      control = createElement(input, controlProps());
    } else if (children) {
      var child = Children.only(children);
      control = cloneElement(child, controlProps(child.props));
    }

    return ___EmotionJSX(Root, rootProps, ___EmotionJSX(Label, null, ___EmotionJSX(FormFieldTextWrapper, textWrapperProps, ___EmotionJSX("span", labelTextProps, label), (required || secondaryText) && ___EmotionJSX(FormFieldSecondaryText, {
      secondaryText: secondaryText
    }, secondaryText ? secondaryText : requiredText)), control), caption && ___EmotionJSX(FormFieldCaption, captionProps, caption));
  };

  return FormField;
}(Component);

_defineProperty(FormField, "displayName", 'FormField');

_defineProperty(FormField, "defaultProps", {
  requiredText: 'Required'
});

export { FormField as default };
FormField.propTypes = process.env.NODE_ENV !== "production" ? formFieldPropTypes : {};