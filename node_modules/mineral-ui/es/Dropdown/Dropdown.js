import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Children, Component, cloneElement } from 'react';
import deepEqual from 'react-fast-compare';
import memoizeOne from 'memoize-one';
import scrollIntoViewIfNeeded from 'scroll-into-view-if-needed';
import { composeEventHandlers, generateId, isRenderProp } from "../utils";
import Menu, { getItems } from "../Menu/Menu";
import MenuItem from "../Menu/MenuItem";
import Root from "../Popover";
import { PLACEMENT } from "./constants";
import DropdownContent from "./DropdownContent";
import ItemMatcher from "./ItemMatcher";
import { dropdownPropTypes } from "./propTypes";

var Dropdown =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Dropdown, _Component);

  function Dropdown() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      highlightedIndex: _this.props.defaultHighlightedIndex,
      isOpen: Boolean(_this.props.defaultIsOpen)
    });

    _defineProperty(_assertThisInitialized(_this), "dropdownTrigger", void 0);

    _defineProperty(_assertThisInitialized(_this), "highlightedItemId", void 0);

    _defineProperty(_assertThisInitialized(_this), "id", _this.props.id || "dropdown-" + generateId());

    _defineProperty(_assertThisInitialized(_this), "itemMatcher", void 0);

    _defineProperty(_assertThisInitialized(_this), "items", void 0);

    _defineProperty(_assertThisInitialized(_this), "getItems", memoizeOne(getItems, deepEqual));

    _defineProperty(_assertThisInitialized(_this), "getStateAndHelpers", function () {
      return {
        state: {
          highlightedIndex: _this.getControllableValue('highlightedIndex'),
          isOpen: _this.getControllableValue('isOpen')
        },
        helpers: {
          close: _this.close,
          focusTrigger: _this.focusTrigger,
          open: _this.open
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "setTriggerRef", function (node) {
      _this.dropdownTrigger = node;
    });

    _defineProperty(_assertThisInitialized(_this), "getContentProps", function (props) {
      if (props === void 0) {
        props = {};
      }

      var _props = props,
          ignoreSubtitle = _props.subtitle,
          ignoreTitle = _props.title,
          ignoreTabIndex = _props.tabIndex,
          restProps = _objectWithoutPropertiesLoose(_props, ["subtitle", "title", "tabIndex"]);

      var _this$props = _this.props,
          modifiers = _this$props.modifiers,
          placement = _this$props.placement,
          positionFixed = _this$props.positionFixed,
          wide = _this$props.wide;
      return _objectSpread({}, restProps, {
        children: _this.renderMenu(),
        id: _this.getContentId(),
        modifiers: modifiers,
        placement: placement,
        positionFixed: positionFixed,
        wide: wide
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderContent", function (_temp) {
      var _ref = _temp === void 0 ? {} : _temp,
          props = _ref.props;

      return ___EmotionJSX(DropdownContent, _this.getContentProps(props));
    });

    _defineProperty(_assertThisInitialized(_this), "getContentId", function () {
      return _this.id + "-content";
    });

    _defineProperty(_assertThisInitialized(_this), "getMenuId", function () {
      return _this.id + "-menu";
    });

    _defineProperty(_assertThisInitialized(_this), "getMenuItemId", function (index) {
      return _this.id + "-item-" + index;
    });

    _defineProperty(_assertThisInitialized(_this), "getTriggerProps", function (props) {
      if (props === void 0) {
        props = {};
      }

      var isOpen = _this.getControllableValue('isOpen');

      var contentId = _this.getContentId();

      var children = _this.props.children;
      return _objectSpread({}, isRenderProp(children) ? props : {}, isOpen ? {
        'aria-activedescendant': _this.getHighlightedItemId() || _this.getMenuId()
      } : {}, {
        'aria-describedby': contentId,
        'aria-haspopup': true,
        'aria-owns': contentId
      }, !isRenderProp(children) ? props : {}, {
        onKeyDown: composeEventHandlers(props.onKeyDown, _this.onTriggerKeyDown),
        onKeyUp: composeEventHandlers(props.onKeyUp, _this.onTriggerKeyUp)
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderTrigger", function (_temp2) {
      var _ref2 = _temp2 === void 0 ? {} : _temp2,
          props = _ref2.props;

      var children = _this.props.children;

      if (isRenderProp(children)) {
        return children(_objectSpread({}, _this.getStateAndHelpers(), {
          props: _this.getTriggerProps(props)
        }));
      }

      var child = Children.only(children);
      return cloneElement(child, _this.getTriggerProps(child.props));
    });

    _defineProperty(_assertThisInitialized(_this), "getMenuProps", function (props) {
      if (props === void 0) {
        props = {};
      }

      var _this$props2 = _this.props,
          data = _this$props2.data,
          itemKey = _this$props2.itemKey;
      return _objectSpread({}, props, {
        id: _this.getMenuId(),
        itemKey: itemKey,
        data: data,
        highlightedIndex: _this.getControllableValue('highlightedIndex'),
        item: _this.renderItem,
        role: 'menu'
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderMenu", function (_temp3) {
      var _ref3 = _temp3 === void 0 ? {} : _temp3,
          props = _ref3.props;

      var menu = _this.props.menu;

      if (isRenderProp(menu)) {
        return menu(_objectSpread({}, _this.getStateAndHelpers(), {
          props: _this.getMenuProps(props)
        }));
      }

      return ___EmotionJSX(Menu, _this.getMenuProps(props));
    });

    _defineProperty(_assertThisInitialized(_this), "getItemProps", function (props) {
      if (props === void 0) {
        props = {};
      }

      var highlightedIndex = _this.getControllableValue('highlightedIndex');

      var _props2 = props,
          itemProps = _props2.props;
      var index = itemProps.index,
          item = itemProps.item;
      return _objectSpread({}, itemProps, item, {
        'aria-disabled': _this.props.disabled || item.disabled,
        children: item.text,
        id: _this.getMenuItemId(index),
        isHighlighted: highlightedIndex === index,
        role: 'menuitem',
        tabIndex: null,
        // Unset tabIndex because we use arrow keys to navigate instead
        onClick: composeEventHandlers(item.onClick, _this.onItemClick)
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderItem", function (props) {
      if (props === void 0) {
        props = {};
      }

      var item = _this.props.item;

      if (isRenderProp(item)) {
        return item(_objectSpread({}, props, _this.getStateAndHelpers(), {
          props: _this.getItemProps(props)
        }));
      }

      return ___EmotionJSX(MenuItem, _this.getItemProps(props));
    });

    _defineProperty(_assertThisInitialized(_this), "getHighlightedItemId", function () {
      var highlightedIndex = _this.getControllableValue('highlightedIndex');

      return highlightedIndex !== undefined && highlightedIndex !== null ? _this.getMenuItemId(highlightedIndex) : undefined;
    });

    _defineProperty(_assertThisInitialized(_this), "hasHighlightedIndex", function () {
      return _this.getControllableValue('highlightedIndex') != undefined;
    });

    _defineProperty(_assertThisInitialized(_this), "onTriggerKeyUp", function (event) {
      // Prevent Firefox from triggering Popover's onClick handler when
      // space key is used to activate trigger.
      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=501496
      event.key === ' ' && event.preventDefault();
    });

    _defineProperty(_assertThisInitialized(_this), "onTriggerKeyDown", function (event) {
      var key = event.key;

      var isOpen = _this.getControllableValue('isOpen');

      if (key === 'ArrowUp') {
        event.preventDefault();

        _this.highlightPreviousItem();

        !isOpen && _this.open(event);
      } else if (key === 'ArrowDown') {
        event.preventDefault();

        _this.highlightNextItem();

        !isOpen && _this.open(event);
      } else if (key === 'Home' && isOpen) {
        event.preventDefault();

        _this.highlightItemAtIndex(0);
      } else if (key === 'End' && isOpen) {
        event.preventDefault();

        _this.highlightItemAtIndex(_this.items.length - 1);
      } else if (key === 'Enter' || key === ' ') {
        event.preventDefault();
        isOpen ? _this.hasHighlightedIndex() ? _this.clickHighlightedItem() : _this.close(event) : _this.open(event);
      } else if (isOpen) {
        _this.highlightItemMatchingKey(key);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "findItemMatchingKey", function (key) {
      _this.itemMatcher = _this.itemMatcher || new ItemMatcher();
      return _this.itemMatcher.findMatchingItem(_this.items, _this.getControllableValue('highlightedIndex'), key);
    });

    _defineProperty(_assertThisInitialized(_this), "highlightItemMatchingKey", function (key) {
      var matchingItem = _this.findItemMatchingKey(key);

      matchingItem && _this.highlightItemAtIndex(_this.items.indexOf(matchingItem));
    });

    _defineProperty(_assertThisInitialized(_this), "highlightItemAtIndex", function (index) {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState({
          highlightedIndex: index
        }, _this.scrollHighlightedItemIntoViewIfNeeded);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "highlightNextItem", function () {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState(function (prevState) {
          return {
            highlightedIndex: prevState.highlightedIndex === null || prevState.highlightedIndex === undefined || prevState.highlightedIndex === _this.items.length - 1 ? 0 : prevState.highlightedIndex + 1
          };
        }, _this.scrollHighlightedItemIntoViewIfNeeded);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "highlightPreviousItem", function () {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState(function (prevState) {
          return {
            highlightedIndex: !prevState.highlightedIndex ? _this.items.length - 1 : prevState.highlightedIndex - 1
          };
        }, _this.scrollHighlightedItemIntoViewIfNeeded);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "scrollHighlightedItemIntoViewIfNeeded", function () {
      var boundary = global.document.getElementById(_this.getContentId());
      var highlightedItemNode = boundary && global.document.getElementById(_this.getHighlightedItemId());

      if (highlightedItemNode) {
        scrollIntoViewIfNeeded(highlightedItemNode, {
          boundary: boundary
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "clickHighlightedItem", function () {
      var highlightedItemNode = global.document.getElementById(_this.getHighlightedItemId());
      highlightedItemNode && highlightedItemNode.click();
    });

    _defineProperty(_assertThisInitialized(_this), "open", function (event) {
      if (_this.isControlled('isOpen')) {
        _this.openActions(event);
      } else {
        _this.setState(function () {
          return {
            isOpen: true
          };
        }, function () {
          _this.openActions(event);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "openActions", function (event) {
      _this.scrollHighlightedItemIntoViewIfNeeded();

      _this.props.onOpen && _this.props.onOpen(event);
    });

    _defineProperty(_assertThisInitialized(_this), "close", function (event) {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState({
          highlightedIndex: null
        });
      }

      if (_this.isControlled('isOpen')) {
        _this.closeActions(event);
      } else {
        _this.setState(function () {
          return {
            isOpen: false
          };
        }, function () {
          _this.closeActions(event);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "closeActions", function (event) {
      _this.props.onClose && _this.props.onClose(event);
    });

    _defineProperty(_assertThisInitialized(_this), "onItemClick", function (event) {
      _this.close(event);

      _this.focusTrigger();
    });

    _defineProperty(_assertThisInitialized(_this), "focusTrigger", function () {
      var node = _this.dropdownTrigger;

      if (!node) {
        return;
      }

      var element = node instanceof HTMLButtonElement || node.getAttribute('role') === 'button' ? node : node.firstChild instanceof HTMLElement ? node.firstChild : null;
      element && element.focus();
    });

    _defineProperty(_assertThisInitialized(_this), "isControlled", function (prop) {
      return _this.props.hasOwnProperty(prop);
    });

    _defineProperty(_assertThisInitialized(_this), "getControllableValue", function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    });

    return _this;
  }

  var _proto = Dropdown.prototype;

  _proto.render = function render() {
    var _this$props3 = this.props,
        children = _this$props3.children,
        data = _this$props3.data,
        ignoreItem = _this$props3.item,
        ignoreMenu = _this$props3.menu,
        restProps = _objectWithoutPropertiesLoose(_this$props3, ["children", "data", "item", "menu"]);

    var isOpen = this.getControllableValue('isOpen');

    var rootProps = _objectSpread({}, restProps, {
      id: this.id,
      isOpen: isOpen,
      onClose: this.close,
      onOpen: this.open,
      content: this.renderContent,
      triggerRef: this.setTriggerRef
    });

    this.items = this.getItems(data);
    return ___EmotionJSX(Root, rootProps, isRenderProp(children) ? this.renderTrigger : this.renderTrigger());
  };

  return Dropdown;
}(Component);

_defineProperty(Dropdown, "displayName", 'Dropdown');

_defineProperty(Dropdown, "defaultProps", {
  itemKey: 'text',
  placement: PLACEMENT['bottom-start']
});

export { Dropdown as default };
Dropdown.propTypes = process.env.NODE_ENV !== "production" ? dropdownPropTypes : {};