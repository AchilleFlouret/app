import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Children } from 'react';
import Flex, { FlexItem } from "../Flex";
import { JUSTIFY_CONTENT } from "../Flex/constants";
export default function StartEnd(props) {
  var children = props.children,
      ignoreJustifyContent = props.justifyContent,
      priority = props.priority,
      ignoreWrap = props.wrap,
      restProps = _objectWithoutPropertiesLoose(props, ["children", "justifyContent", "priority", "wrap"]);

  var rootProps = _objectSpread({
    justifyContent: JUSTIFY_CONTENT.between
  }, restProps);

  var flexItems;

  if (Children.count(children) === 2) {
    var growFactors = {
      start: [1, 0],
      end: [0, 1],
      both: [1, 1],
      none: [undefined, undefined]
    };
    flexItems = Children.map(children, function (child, index) {
      return index ? ___EmotionJSX(FlexItem, {
        grow: growFactors[priority || 'none'][1]
      }, child) : ___EmotionJSX(FlexItem, {
        grow: growFactors[priority || 'none'][0]
      }, child);
    });
  } else {
    throw new Error('StartEnd must have exactly two children.');
  } // $FlowFixMe - Reverse directions unsupported here but are supported on Flex


  return ___EmotionJSX(Flex, rootProps, flexItems);
}
StartEnd.displayName = 'StartEnd';