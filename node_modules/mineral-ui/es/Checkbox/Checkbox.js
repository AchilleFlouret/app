import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import { canUseDOM } from 'exenv';
import IconChecked from "../Icon/IconCheckBoxCheck";
import IconIndeterminate from "../Icon/IconCheckBoxIndeterminate";
import { composeEventHandlers } from "../utils";
import { CheckboxRoot as Root } from "./styled";
import { LABEL_POSITION, SIZE } from "./constants";
import { checkboxPropTypes } from "./propTypes";

// Detect if browser triggers change event when click indeterminate checkbox
// IE/Edge/other? do not
var indeterminateClickTriggersChangeEvent = function () {
  var supportsOnChange = false;

  if (canUseDOM && process.env.NODE_ENV !== 'test') {
    var _document = document,
        body = _document.body;
    var checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.indeterminate = true;
    checkbox.setAttribute('hidden', 'true');
    checkbox.addEventListener('change', function () {
      supportsOnChange = true;
    });
    body && body.appendChild(checkbox);
    checkbox.click();
    body && body.removeChild(checkbox);
  }

  return supportsOnChange;
}();

var _ref =
/*#__PURE__*/
___EmotionJSX(IconIndeterminate, null);

var _ref2 =
/*#__PURE__*/
___EmotionJSX(IconChecked, null);

var Checkbox =
/*#__PURE__*/
function (_PureComponent) {
  _inheritsLoose(Checkbox, _PureComponent);

  function Checkbox() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "input", void 0);

    _defineProperty(_assertThisInitialized(_this), "indeterminate", void 0);

    _defineProperty(_assertThisInitialized(_this), "setInputRef", function (node) {
      var inputRef = _this.props.inputRef;
      _this.input = node;
      inputRef && inputRef(node);
    });

    _defineProperty(_assertThisInitialized(_this), "updateState", function (indeterminate, checked) {
      _this.indeterminate = indeterminate;

      if (_this.input) {
        _this.input.indeterminate = indeterminate;
        _this.input.checked = checked;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (event) {
      var _this$props = _this.props,
          defaultIndeterminate = _this$props.defaultIndeterminate,
          indeterminate = _this$props.indeterminate,
          onChange = _this$props.onChange;

      if (defaultIndeterminate || indeterminate) {
        var nextIndeterminate = _this.isControlled('indeterminate') ? _this.getIndeterminateValue() : !_this.getIndeterminateValue();

        _this.updateState(nextIndeterminate, nextIndeterminate);

        if (!indeterminateClickTriggersChangeEvent) {
          onChange && onChange(event);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "isControlled", function (prop) {
      return _this.props.hasOwnProperty(prop);
    });

    _defineProperty(_assertThisInitialized(_this), "getIndeterminateValue", function () {
      return Boolean(_this.isControlled('indeterminate') ? _this.props.indeterminate : _this.indeterminate);
    });

    return _this;
  }

  var _proto = Checkbox.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$props2 = this.props,
        checked = _this$props2.checked,
        defaultChecked = _this$props2.defaultChecked,
        defaultIndeterminate = _this$props2.defaultIndeterminate,
        indeterminate = _this$props2.indeterminate;
    var isIndeterminate = Boolean(indeterminate || defaultIndeterminate);
    var isChecked = Boolean(isIndeterminate || checked || defaultChecked);
    this.updateState(isIndeterminate, isChecked);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props3 = this.props,
        checked = _this$props3.checked,
        indeterminate = _this$props3.indeterminate;

    if (prevProps.indeterminate !== indeterminate || prevProps.checked !== checked) {
      this.updateState(Boolean(indeterminate), Boolean(indeterminate || checked));
    }
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        className = _this$props4.className,
        defaultIndeterminate = _this$props4.defaultIndeterminate,
        indeterminate = _this$props4.indeterminate,
        onClick = _this$props4.onClick,
        otherRootProps = _this$props4.rootProps,
        restProps = _objectWithoutPropertiesLoose(_this$props4, ["className", "defaultIndeterminate", "indeterminate", "onClick", "rootProps"]);

    var rootProps = _objectSpread({
      iconChecked: defaultIndeterminate || indeterminate ? _ref : _ref2,
      inputRef: this.setInputRef,
      onClick: composeEventHandlers(onClick, this.handleClick),
      rootProps: _objectSpread({
        className: className
      }, otherRootProps),
      type: 'checkbox'
    }, restProps);

    return ___EmotionJSX(Root, rootProps);
  };

  return Checkbox;
}(PureComponent);

_defineProperty(Checkbox, "defaultProps", {
  labelPosition: LABEL_POSITION.end,
  size: SIZE.large
});

_defineProperty(Checkbox, "displayName", 'Checkbox');

export { Checkbox as default };
Checkbox.propTypes = process.env.NODE_ENV !== "production" ? checkboxPropTypes : {};