import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Children, cloneElement, Component } from 'react';
import { canUseDOM } from 'exenv';
import { withTheme } from 'emotion-theming';
import { generateId } from "../utils";
import TabList from "./TabList";
import TabPanel from "./TabPanel";
import { TabsRoot as Root } from "./styled";
import { ALIGN, POSITION } from "./constants";
import { tabsPropTypes } from "./propTypes";
export var Tabs =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Tabs, _Component);

  function Tabs() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      selectedTabIndex: _this.props.defaultSelectedTabIndex || 0
    });

    _defineProperty(_assertThisInitialized(_this), "disabledTabIndexes", new Set());

    _defineProperty(_assertThisInitialized(_this), "id", _this.props.id || "tabs-" + generateId());

    _defineProperty(_assertThisInitialized(_this), "lastIndex", void 0);

    _defineProperty(_assertThisInitialized(_this), "root", void 0);

    _defineProperty(_assertThisInitialized(_this), "vertical", _this.props.position === POSITION.start || _this.props.position === POSITION.end);

    _defineProperty(_assertThisInitialized(_this), "getPanelId", function (index) {
      return _this.id + "-panel-" + index;
    });

    _defineProperty(_assertThisInitialized(_this), "getTabId", function (index) {
      return _this.id + "-tab-" + index;
    });

    _defineProperty(_assertThisInitialized(_this), "setRootRef", function (node) {
      _this.root = node;
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (event) {
      event.preventDefault();
      event.persist();
      var target = event.currentTarget;
      var selectedTabIndex = parseInt(target.getAttribute('data-index'));

      if (_this.isControlled('selectedTabIndex') && selectedTabIndex !== _this.props.selectedTabIndex) {
        _this.changeActions(selectedTabIndex, event);
      } else {
        _this.setSelectedTabIndex(selectedTabIndex, event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (event) {
      event.persist();

      if (['ArrowLeft', 'ArrowRight'].indexOf(event.key) !== -1) {
        event.preventDefault();
        var rtl = _this.props.theme.direction === 'rtl';
        var flippedDirections = {
          ArrowLeft: 'ArrowRight',
          ArrowRight: 'ArrowLeft'
        };
        var key = rtl && flippedDirections[event.key] ? flippedDirections[event.key] : event.key;

        _this.handleIncrement(key, event);
      } else if (_this.vertical && ['ArrowDown', 'ArrowUp'].indexOf(event.key) !== -1) {
        event.preventDefault();

        _this.handleIncrement(event.key, event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleIncrement", function (direction, event) {
      var selectedTabIndex = _this.getControllableValue('selectedTabIndex');

      var nextIndex = direction === 'ArrowRight' || direction === 'ArrowDown' ? selectedTabIndex === _this.lastIndex ? 0 : _this.getNonDisabledIndex(selectedTabIndex + 1) : selectedTabIndex === 0 ? _this.lastIndex : _this.getNonDisabledIndex(selectedTabIndex - 1, {
        decrease: true
      });

      _this.setSelectedTabIndex(nextIndex, event);
    });

    _defineProperty(_assertThisInitialized(_this), "getNonDisabledIndex", function (index, _temp) {
      var _ref = _temp === void 0 ? {} : _temp,
          decrease = _ref.decrease;

      return _this.disabledTabIndexes.has(index) ? _this.getNonDisabledIndex(decrease ? index - 1 : index + 1, {
        decrease: decrease
      }) : index;
    });

    _defineProperty(_assertThisInitialized(_this), "setSelectedTabIndex", function (selectedTabIndex, event) {
      if (selectedTabIndex !== _this.state.selectedTabIndex) {
        _this.setState({
          selectedTabIndex: selectedTabIndex
        }, function () {
          if (canUseDOM) {
            var nextTab = _this.root && _this.root.querySelector("[data-index=\"" + selectedTabIndex + "\"]");

            nextTab && nextTab.focus();
          }

          _this.changeActions(selectedTabIndex, event);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "changeActions", function (selectedTabIndex, event) {
      var onChange = _this.props.onChange;
      onChange && onChange(selectedTabIndex, event);
    });

    _defineProperty(_assertThisInitialized(_this), "isControlled", function (prop) {
      return _this.props.hasOwnProperty(prop);
    });

    _defineProperty(_assertThisInitialized(_this), "getControllableValue", function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    });

    return _this;
  }

  var _proto = Tabs.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        align = _this$props.align,
        children = _this$props.children,
        label = _this$props.label,
        height = _this$props.height,
        maxTabWidth = _this$props.maxTabWidth,
        position = _this$props.position,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["align", "children", "label", "height", "maxTabWidth", "position"]);

    var selectedTabIndex = this.getControllableValue('selectedTabIndex');
    var ids = [];
    var tabPanelProps;
    var tabItems = [];
    Children.forEach(children, function (tab, index) {
      var _tab$props = tab.props,
          children = _tab$props.children,
          disabled = _tab$props.disabled,
          icon = _tab$props.icon,
          id = _tab$props.id,
          maxWidth = _tab$props.maxWidth,
          title = _tab$props.title;

      if (id && ids.indexOf(id) === -1) {
        ids.push(id);
      } else if (id) {
        throw new Error("[mineral-ui/Tabs] Tab id " + id + " is not unique");
      }

      var panelId = _this2.getPanelId(index);

      var selected = index === selectedTabIndex;

      var tabId = id || _this2.getTabId(index);

      var tabProps = {
        children: title,
        disabled: disabled,
        icon: icon,
        id: tabId,
        index: index,
        key: index,
        maxWidth: !_this2.vertical && align === ALIGN.justify ? undefined : maxWidth || maxTabWidth,
        onClick: !disabled ? _this2.handleClick : function (event) {
          event.preventDefault();
        },
        onKeyDown: _this2.handleKeyDown,
        panelId: panelId,
        position: position,
        selected: selected
      };
      tabItems.push(cloneElement(tab, tabProps));

      if (selected) {
        tabPanelProps = {
          children: children,
          id: panelId,
          position: position,
          tabId: tabId
        };
      }

      if (disabled) {
        _this2.disabledTabIndexes.add(index);
      } else {
        _this2.lastIndex = index;
      }
    });

    var rootProps = _objectSpread({
      ref: this.setRootRef,
      height: height,
      position: position
    }, restProps, {
      'aria-labelledby': undefined
    });

    var tabListProps = {
      align: align,
      'aria-label': label,
      'aria-labelledby': this.props['aria-labelledby'],
      height: height,
      onIncrement: this.handleIncrement,
      position: position,
      role: 'tablist',
      vertical: this.vertical
    };
    return ___EmotionJSX(Root, rootProps, ___EmotionJSX(TabList, tabListProps, tabItems), ___EmotionJSX(TabPanel, tabPanelProps));
  };

  return Tabs;
}(Component);

_defineProperty(Tabs, "displayName", 'Tabs');

_defineProperty(Tabs, "defaultProps", {
  align: ALIGN.start,
  maxTabWidth: '8.5em',
  position: POSITION.top
});

Tabs.propTypes = process.env.NODE_ENV !== "production" ? tabsPropTypes : {};
export default withTheme(Tabs);