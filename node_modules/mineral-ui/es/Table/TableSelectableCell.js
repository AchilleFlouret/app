import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import TableCell from "./TableCell";
import TableHeaderCell from "./TableHeaderCell";
import TableContext from "./TableContext";
import { PaddedCheckbox } from "./styled";

var TableSelectableCell =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(TableSelectableCell, _Component);

  function TableSelectableCell() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = TableSelectableCell.prototype;

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return this.props.checked !== nextProps.checked || this.props.indeterminate !== nextProps.indeterminate;
  };

  _proto.render = function render() {
    var _this = this;

    return ___EmotionJSX(TableContext.Consumer, null, function (_ref) {
      var density = _ref.density;

      var _this$props = _this.props,
          checked = _this$props.checked,
          disabled = _this$props.disabled,
          indeterminate = _this$props.indeterminate,
          isHeader = _this$props.isHeader,
          label = _this$props.label,
          onChange = _this$props.onChange,
          restProps = _objectWithoutPropertiesLoose(_this$props, ["checked", "disabled", "indeterminate", "isHeader", "label", "onChange"]);

      var Root = isHeader ? TableHeaderCell : TableCell;

      var rootProps = _objectSpread({
        noPadding: true,
        width: isHeader ? 1 : undefined
      }, restProps);

      var checkboxProps = {
        checked: checked,
        disabled: disabled,
        density: density,
        hideLabel: true,
        indeterminate: indeterminate,
        isHeader: isHeader,
        label: label,
        onChange: onChange
      };
      return ___EmotionJSX(Root, rootProps, ___EmotionJSX(PaddedCheckbox, checkboxProps));
    });
  };

  return TableSelectableCell;
}(Component);

_defineProperty(TableSelectableCell, "displayName", 'TableSelectableCell');

export { TableSelectableCell as default };