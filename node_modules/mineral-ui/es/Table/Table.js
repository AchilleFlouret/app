import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import deepEqual from 'react-fast-compare';
import memoizeOne from 'memoize-one';
import SelectableTable from "./SelectableTable";
import SelectableSortableTable from "./SelectableSortableTable";
import SortableTable from "./SortableTable";
import TableBase from "./TableBase";
import { getColumns, getComparators, getSelectableRows, getSortable } from "./utils";
import { DENSITY, TITLE_ELEMENT } from "./constants";
import { tablePropTypes } from "./propTypes";

var Table =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Table, _Component);

  function Table() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "columns", void 0);

    _defineProperty(_assertThisInitialized(_this), "comparators", void 0);

    _defineProperty(_assertThisInitialized(_this), "selectableRows", void 0);

    _defineProperty(_assertThisInitialized(_this), "sortable", void 0);

    _defineProperty(_assertThisInitialized(_this), "getColumns", memoizeOne(getColumns, function (nextProps, prevProps) {
      return deepEqual(prevProps.columns, nextProps.columns) && !prevProps.columns && deepEqual(prevProps.data, nextProps.data);
    }));

    _defineProperty(_assertThisInitialized(_this), "getComparators", memoizeOne(getComparators, function (nextProps, prevProps) {
      return deepEqual(nextProps.columns, prevProps.columns);
    }));

    _defineProperty(_assertThisInitialized(_this), "getSelectableRows", memoizeOne(getSelectableRows, deepEqual));

    _defineProperty(_assertThisInitialized(_this), "getSortable", memoizeOne(getSortable, function (nextProps, prevProps) {
      return deepEqual(nextProps.columns, prevProps.columns);
    }));

    return _this;
  }

  var _proto = Table.prototype;

  _proto.render = function render() {
    this.columns = this.getColumns(this.props);
    this.comparators = this.getComparators(this.props);
    this.selectableRows = this.getSelectableRows(this.props.data);
    this.sortable = this.getSortable(this.props);

    var _this$props = this.props,
        defaultSelectedRows = _this$props.defaultSelectedRows,
        onToggleRow = _this$props.onToggleRow,
        onToggleAllRows = _this$props.onToggleAllRows,
        selectable = _this$props.selectable,
        selectedRows = _this$props.selectedRows,
        sortable = _this$props.sortable,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["defaultSelectedRows", "onToggleRow", "onToggleAllRows", "selectable", "selectedRows", "sortable"]);

    var rootProps = _objectSpread({}, restProps, {
      columns: this.columns,
      comparators: this.comparators
    }, defaultSelectedRows ? {
      defaultSelected: this.getSelectableRows(defaultSelectedRows)
    } : undefined, onToggleRow ? {
      onToggle: onToggleRow
    } : undefined, onToggleAllRows ? {
      onToggleAll: onToggleAllRows
    } : undefined, selectedRows ? {
      selected: selectedRows
    } : undefined, selectable ? {
      selectableRows: this.selectableRows
    } : undefined, this.sortable ? {
      sortable: sortable
    } : undefined);

    if (selectable && this.sortable) {
      return ___EmotionJSX(SelectableSortableTable, rootProps);
    } else if (selectable) {
      return ___EmotionJSX(SelectableTable, rootProps);
    } else if (this.sortable) {
      return ___EmotionJSX(SortableTable, rootProps);
    } else {
      var ignoreSortable = rootProps.sortable,
          rootPropsWithoutSortable = _objectWithoutPropertiesLoose(rootProps, ["sortable"]);

      return ___EmotionJSX(TableBase, rootPropsWithoutSortable);
    }
  };

  return Table;
}(Component);

_defineProperty(Table, "displayName", 'Table');

_defineProperty(Table, "defaultProps", {
  density: DENSITY.compact,
  messages: {
    deselectAllRows: 'Deselect all rows',
    deselectRow: 'Deselect row',
    selectAllRows: 'Select all rows',
    selectedRows: 'Selected rows',
    selectRow: 'Select row',
    sortColumnAscending: 'Sort column in ascending order',
    sortColumnDescending: 'Sort column in descending order'
  },
  titleAs: TITLE_ELEMENT.h4
});

Table.propTypes = process.env.NODE_ENV !== "production" ? tablePropTypes : {};
export default Table;