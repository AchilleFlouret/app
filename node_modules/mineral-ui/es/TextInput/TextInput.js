import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { TextInputRoot as Root, Input } from "./styled";
import { SIZE, TYPE } from "./constants";
import { textInputPropTypes } from "./propTypes";

var TextInput = function TextInput(props) {
  var className = props.className,
      disabled = props.disabled,
      iconEnd = props.iconEnd,
      iconStart = props.iconStart,
      inputRef = props.inputRef,
      invalid = props.invalid,
      prefix = props.prefix,
      readOnly = props.readOnly,
      required = props.required,
      otherRootProps = props.rootProps,
      size = props.size,
      suffix = props.suffix,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose(props, ["className", "disabled", "iconEnd", "iconStart", "inputRef", "invalid", "prefix", "readOnly", "required", "rootProps", "size", "suffix", "variant"]);

  var inputProps = _objectSpread({
    'aria-invalid': invalid,
    'aria-required': required,
    controlRef: inputRef,
    disabled: disabled,
    readOnly: readOnly,
    required: required
  }, restProps);

  var rootProps = _objectSpread({
    className: className,
    control: Input,
    controlProps: inputProps,
    disabled: disabled,
    iconEnd: iconEnd,
    iconStart: iconStart,
    prefix: prefix,
    readOnly: readOnly,
    size: size,
    suffix: suffix,
    variant: variant
  }, otherRootProps);

  return ___EmotionJSX(Root, rootProps);
};

TextInput.displayName = 'TextInput';
var defaultProps = {
  size: SIZE.large,
  type: TYPE.text
};
TextInput.defaultProps = defaultProps;
TextInput.propTypes = process.env.NODE_ENV !== "production" ? textInputPropTypes : {};
export default TextInput;