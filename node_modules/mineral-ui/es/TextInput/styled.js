import _styled from "@emotion/styled-base";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { getNormalizedValue } from "../styles";
import { themed, mapComponentThemes } from "../themes";
import FauxControl from "../FauxControl";
import { SIZE } from "./constants";
import { textInputTheme } from "./themes";
var ThemedFauxControl = themed(FauxControl)(function (_ref) {
  var baseTheme = _ref.theme;
  return mapComponentThemes({
    name: 'TextInput',
    theme: textInputTheme(baseTheme)
  }, {
    name: 'FauxControl',
    theme: {}
  }, baseTheme);
});
export var TextInputRoot =
/*#__PURE__*/
_styled(ThemedFauxControl, {
  target: "e1gbx4v70"
})(function (_ref2) {
  var baseTheme = _ref2.theme,
      variant = _ref2.variant;
  var theme = textInputTheme(baseTheme);

  if (variant) {
    theme = _objectSpread({}, theme, {
      TextInputIcon_color: theme["icon_color_" + variant]
    });
  }

  return {
    alignItems: 'center',
    cursor: 'text',
    display: 'flex',
    width: '100%',
    '& [role="img"]': {
      color: theme.TextInputIcon_color,
      display: 'block',
      flex: '0 0 auto',
      margin: "0 " + theme.TextInputIcon_marginHorizontal,
      '&:last-of-type': {
        color: theme.TextInputIcon_color
      }
    }
  };
});
export var Input =
/*#__PURE__*/
_styled('input', {
  target: "e1gbx4v71"
})(function (_ref3) {
  var controlSize = _ref3.controlSize,
      nonHtmlSize = _ref3.size,
      baseTheme = _ref3.theme;
  var theme = textInputTheme(baseTheme);
  var size = controlSize || nonHtmlSize;
  var fontSize = size === SIZE.small ? theme.TextInput_fontSize_small : theme.TextInput_fontSize;
  return {
    backgroundColor: 'transparent',
    border: 0,
    boxShadow: 'none',
    flex: '1 1 auto',
    fontFamily: 'inherit',
    height: getNormalizedValue(theme["TextInput_height_" + size], fontSize),
    minWidth: 0,
    width: '100%',
    // Normalize Safari search inputs
    '&[type="search"]': {
      WebkitAppearance: 'none',
      '&::-webkit-search-decoration': {
        WebkitAppearance: 'none'
      }
    }
  };
});