import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { cloneElement } from 'react';
import { findByType } from "../utils/children";
import { DialogHeaderRoot as Root } from "./styled";
import DialogTitle from "./DialogTitle";
import { dialogHeaderPropTypes } from "./propTypes";

var DialogHeader = function DialogHeader(props) {
  var children = props.children,
      closeButton = props.closeButton,
      titleProps = props.titleProps,
      rootProps = _objectWithoutPropertiesLoose(props, ["children", "closeButton", "titleProps"]);

  var title = findByType(children, DialogTitle);

  if (title) {
    title = cloneElement(title, _objectSpread({}, titleProps, title.props));
  }

  return ___EmotionJSX(Root, rootProps, title || children, closeButton);
};

DialogHeader.displayName = 'DialogHeader';
DialogHeader.propTypes = process.env.NODE_ENV !== "production" ? dialogHeaderPropTypes : {};
export default DialogHeader;