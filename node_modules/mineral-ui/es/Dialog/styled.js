import _styled from "@emotion/styled-base";
import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import isPropValid from '@emotion/is-prop-valid';
import React from 'react';
import withProps from 'recompose/withProps';
import { componentStyleReset, getNormalizedValue } from "../styles";
import { themed, mapComponentThemes } from "../themes";
import { ignoreSsrWarning } from "../utils/emotion";
import Button from "../Button";
import Text from "../Text";
import IconClose from "../Icon/IconClose";
import _OverflowContainerWithShadows from "../OverflowContainer/OverflowContainerWithShadows";
import { dialogTheme, dialogActionsTheme, dialogBodyTheme, dialogRowTheme, dialogTitleTheme } from "./themes";
import DialogRow from "./DialogRow";
export var DialogRoot =
/*#__PURE__*/
_styled('div', {
  target: "eom7rq70"
})(function (_ref) {
  var modeless = _ref.modeless,
      theme = _ref.theme;
  return _objectSpread({}, componentStyleReset(theme), {
    alignItems: 'center',
    bottom: 0,
    display: 'flex',
    justifyContent: 'center',
    left: 0,
    position: 'fixed',
    pointerEvents: modeless ? 'none' : undefined,
    right: 0,
    top: 0
  });
});
export var DialogActionsRoot =
/*#__PURE__*/
_styled('div', {
  target: "eom7rq71"
})(function (_ref2) {
  var _notLastChil;

  var baseTheme = _ref2.theme;
  var theme = dialogActionsTheme(baseTheme);
  var marginProperty = theme.direction === 'rtl' ? 'marginLeft' : 'marginRight';
  return {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'flex-end',
    '& > *:not(:last-child)': (_notLastChil = {}, _notLastChil[marginProperty] = theme.DialogActionsItem_margin, _notLastChil)
  };
});
export var DialogAnimate =
/*#__PURE__*/
_styled('div', {
  target: "eom7rq72"
})(function (_ref3) {
  var state = _ref3.state,
      baseTheme = _ref3.theme;
  var theme = dialogTheme(baseTheme);
  return {
    opacity: state === 'entered' ? 1 : 0,
    position: 'relative',
    transition: "opacity " + theme.Dialog_transitionDuration + " ease",
    willChange: 'opacity',
    zIndex: theme.Dialog_zIndex
  };
});
export var DialogBodyRoot =
/*#__PURE__*/
_styled(DialogRow, {
  target: "eom7rq73"
})(function (_ref4) {
  var _ref5;

  var baseTheme = _ref4.theme;
  var theme = dialogRowTheme(baseTheme);
  var fontSize = theme.DialogRow_fontSize;
  var marginVertical = "" + getNormalizedValue(theme.DialogRow_marginVertical, fontSize);
  return _ref5 = {
    display: 'flex',
    flex: '1 1 auto',
    fontSize: fontSize,
    margin: 0,
    minHeight: '0%',
    // See: https://css-tricks.com/flexbox-truncated-text/#comment-1611744
    padding: 0
  }, _ref5['&:first-child' + ignoreSsrWarning] = {
    marginTop: marginVertical
  }, _ref5['&:last-child'] = {
    marginBottom: marginVertical
  }, _ref5;
});
var DialogBodyThemedOverflowContainerWithShadows = themed(_OverflowContainerWithShadows)(function (_ref6) {
  var baseTheme = _ref6.theme;
  return mapComponentThemes({
    name: 'DialogBody',
    theme: dialogBodyTheme(baseTheme)
  }, {
    name: 'OverflowContainerWithShadows',
    theme: {}
  }, baseTheme);
});
export var DialogBodyOverflowContainerWithShadows = withProps({
  scrollY: true
})(
/*#__PURE__*/
_styled(DialogBodyThemedOverflowContainerWithShadows, {
  target: "eom7rq74"
})(function (_ref7) {
  var _ref8;

  var baseTheme = _ref7.theme;
  var theme = dialogRowTheme(baseTheme);
  var fontSize = theme.DialogRow_fontSize;
  var paddingHorizontal = "" + getNormalizedValue(theme.DialogRow_paddingHorizontal, fontSize);
  return _ref8 = {
    display: 'flex',
    flex: '1 1 auto',
    width: '100%',
    // OverflowContainerWithShadows > Scroller
    '& > div': {
      paddingLeft: paddingHorizontal,
      paddingRight: paddingHorizontal
    }
  }, _ref8['& > div > :first-child' + ignoreSsrWarning] = {
    marginTop: 0
  }, _ref8['& > div > :last-child'] = {
    marginBottom: 0
  }, _ref8;
}));
var DialogThemedButton = themed(Button)(function (_ref9) {
  var theme = _ref9.theme;
  return {
    ButtonIcon_color: theme.color
  };
});
export var DialogCloseButton = withProps({
  iconStart: ___EmotionJSX(IconClose, null),
  minimal: true,
  size: 'small',
  type: 'button'
})(
/*#__PURE__*/
_styled(DialogThemedButton, {
  target: "eom7rq75"
})(function (_ref10) {
  var _ref11;

  var baseTheme = _ref10.theme;
  var theme = dialogTheme(baseTheme);
  var marginProperty = theme.direction === 'rtl' ? 'marginRight' : 'marginLeft';
  return _ref11 = {}, _ref11[marginProperty] = theme.DialogCloseButton_margin, _ref11;
}));
export var DialogContent =
/*#__PURE__*/
_styled('div', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'size' && isPropValid(prop);
  },
  target: "eom7rq76"
})(function (_ref12) {
  var size = _ref12.size,
      baseTheme = _ref12.theme;
  var theme = dialogTheme(baseTheme);

  var getSizeStyles = function getSizeStyles(size) {
    var _ref13;

    var maxWidth = theme["DialogContent_maxWidth_" + size];
    var maxHeight = theme["DialogContent_maxHeight_" + size];
    var width = theme["DialogContent_width_" + size];
    var offsetVertical = theme.DialogContent_offsetVertical;
    var maxHeightNumber = parseFloat(maxHeight);
    var offsetVerticalNumber = parseFloat(offsetVertical);
    var minHeight = maxHeightNumber + 2 * offsetVerticalNumber + "em";
    return _ref13 = {
      maxWidth: maxWidth,
      width: width
    }, _ref13["@media(min-height: " + minHeight + ")"] = {
      maxHeight: maxHeight
    }, _ref13;
  };

  return _objectSpread({
    backgroundColor: theme.DialogContent_backgroundColor,
    border: "1px solid " + theme.DialogContent_borderColor,
    borderRadius: theme.DialogContent_borderRadius,
    boxShadow: theme.DialogContent_boxShadow,
    display: 'flex',
    flexDirection: 'column',
    maxHeight: theme.DialogContent_maxHeight,
    minWidth: theme.DialogContent_minWidth,
    pointerEvents: 'all',
    position: 'relative'
  }, getSizeStyles(size));
});
export var DialogFooterRoot = withProps({
  as: 'footer'
})(
/*#__PURE__*/
_styled(DialogRow, {
  target: "eom7rq77"
})({
  name: "1tu59u4",
  styles: "flex:0 0 auto;"
}));
export var DialogHeaderRoot = withProps({
  as: 'header'
})(
/*#__PURE__*/
_styled(DialogRow, {
  target: "eom7rq78"
})({
  name: "z49cen",
  styles: "display:flex;flex:0 0 auto;justify-content:space-between;"
}));
export var DialogIEWrapper =
/*#__PURE__*/
_styled('div', {
  target: "eom7rq79"
})({
  name: "k008qs",
  styles: "display:flex;"
});
export var DialogOverlay =
/*#__PURE__*/
_styled('div', {
  target: "eom7rq710"
})(function (_ref14) {
  var baseTheme = _ref14.theme;
  var theme = dialogTheme(baseTheme);
  return {
    backgroundColor: theme.DialogOverlay_backgroundColor,
    bottom: 0,
    left: 0,
    overflow: 'hidden',
    position: 'absolute',
    right: 0,
    top: 0
  };
});
export var DialogRowRoot =
/*#__PURE__*/
_styled('div', {
  target: "eom7rq711"
})(function (_ref15) {
  var baseTheme = _ref15.theme;
  var theme = dialogRowTheme(baseTheme);
  var fontSize = theme.DialogRow_fontSize;
  return _objectSpread({}, componentStyleReset(baseTheme), {
    fontSize: fontSize,
    margin: getNormalizedValue(theme.DialogRow_marginVertical, fontSize) + " 0",
    outline: 0,
    padding: "0 " + getNormalizedValue(theme.DialogRow_paddingHorizontal, fontSize)
  });
});
export var DialogTitleRoot =
/*#__PURE__*/
_styled('div', {
  target: "eom7rq712"
})(function (_ref16) {
  var _roleImg;

  var baseTheme = _ref16.theme,
      variant = _ref16.variant;
  var theme = dialogTitleTheme(baseTheme);
  var marginProperty = theme.direction === 'rtl' ? 'marginLeft' : 'marginRight';
  return {
    color: variant ? theme["color_" + variant] : theme.DialogTitle_color,
    display: 'flex',
    '& > [role="img"]': (_roleImg = {
      color: variant ? theme["icon_color_" + variant] : null,
      flex: '0 0 auto'
    }, _roleImg[marginProperty] = theme.DialogTitleIcon_margin, _roleImg)
  };
});
export var DialogTitleTitle =
/*#__PURE__*/
_styled(Text, {
  target: "eom7rq713"
})({
  name: "mi52gy",
  styles: "color:inherit;flex:1 1 auto;"
});