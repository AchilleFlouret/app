import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Children, cloneElement } from 'react';
import IconDanger from "../Icon/IconDanger";
import IconSuccess from "../Icon/IconSuccess";
import IconWarning from "../Icon/IconWarning";
import { CardTitleRoot as Root, CardTitleAvatar as Avatar, CardTitleInner as Inner, CardTitleSecondaryText as SecondaryText, CardTitleSubtitle as Subtitle, CardTitleTitle as Title, CardTitleTitleContent as TitleContent } from "./styled";
import { cardTitlePropTypes } from "./propTypes";
var variantIcons = {
  danger: ___EmotionJSX(IconDanger, {
    size: "medium"
  }),
  success: ___EmotionJSX(IconSuccess, {
    size: "medium"
  }),
  warning: ___EmotionJSX(IconWarning, {
    size: "medium"
  })
};
export default function CardTitle(props) {
  var actions = props.actions,
      avatar = props.avatar,
      children = props.children,
      secondaryText = props.secondaryText,
      subtitle = props.subtitle,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose(props, ["actions", "avatar", "children", "secondaryText", "subtitle", "variant"]);

  var rootProps = _objectSpread({}, restProps);

  var secondaryComponent = actions ? Children.map(actions, function (action, index) {
    return cloneElement(action, {
      key: index
    });
  }) : secondaryText ? ___EmotionJSX(SecondaryText, null, secondaryText) : null;
  return ___EmotionJSX(Root, rootProps, avatar && ___EmotionJSX(Avatar, {
    subtitle: subtitle
  }, avatar), ___EmotionJSX(Inner, null, ___EmotionJSX(Title, {
    variant: variant
  }, variant && variantIcons[variant], ___EmotionJSX(TitleContent, {
    actions: actions
  }, children), secondaryComponent), subtitle && ___EmotionJSX(Subtitle, {
    avatar: avatar
  }, subtitle)));
}
CardTitle.displayName = 'CardTitle';
CardTitle.propTypes = process.env.NODE_ENV !== "production" ? cardTitlePropTypes : {};