function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { pxToEm } from "../styles";
// prettier-ignore
export var cardTheme = function cardTheme(baseTheme) {
  return _objectSpread({
    Card_backgroundColor: baseTheme.panel_backgroundColor,
    Card_borderColor: baseTheme.panel_borderColor,
    Card_borderRadius: baseTheme.borderRadius_1,
    Card_boxShadow: baseTheme.boxShadow_2,
    Card_boxShadow_focus: "0 0 0 2px " + baseTheme.borderColor_theme_focus + ", " + baseTheme.boxShadow_1,
    CardRow_marginVertical: baseTheme.space_stack_md,
    CardRow_marginVerticalLast: baseTheme.space_stack_lg,
    CardRow_paddingHorizontal: baseTheme.space_inset_md
  }, baseTheme);
};
export var cardActionsTheme = function cardActionsTheme(baseTheme) {
  return _objectSpread({
    CardActionsAction_spaceInline: baseTheme.space_inline_sm
  }, baseTheme);
};
export var cardBlockTheme = function cardBlockTheme(baseTheme) {
  return _objectSpread({
    CardBlock_fontSize: baseTheme.fontSize_ui,
    CardBlock_lineHeight: baseTheme.lineHeight_prose
  }, baseTheme);
};
export var cardDividerTheme = function cardDividerTheme(baseTheme) {
  return _objectSpread({
    CardDivider_borderColor: baseTheme.borderColor,
    CardDivider_borderWidth: '1px'
  }, baseTheme);
};
export var cardFooterTheme = function cardFooterTheme(baseTheme) {
  return _objectSpread({
    CardFooter_backgroundColor: baseTheme.well_backgroundColor,
    CardFooter_borderColor: baseTheme.borderColor,
    CardFooterRow_marginVertical: baseTheme.space_stack_sm,
    CardFooterRow_marginVerticalLast: baseTheme.space_stack_md,
    CardFooterTitle_color: baseTheme.h5_color,
    CardFooterTitle_fontSize: baseTheme.h5_fontSize,
    CardFooterTitle_fontWeight: baseTheme.h5_fontWeight
  }, baseTheme);
};
export var cardStatusTheme = function cardStatusTheme(baseTheme) {
  return _objectSpread({
    CardStatus_fontSize: baseTheme.fontSize_ui,
    CardStatus_fontWeight: baseTheme.fontWeight_regular,
    CardStatusIcon_margin: baseTheme.space_inline_sm,
    CardStatusIcon_size: pxToEm(12)
  }, baseTheme);
};
export var cardTitleTheme = function cardTitleTheme(baseTheme) {
  return _objectSpread({
    CardTitle_color: baseTheme.h4_color,
    CardTitle_fontSize: baseTheme.h4_fontSize,
    CardTitle_fontWeight: baseTheme.h4_fontWeight,
    CardTitleAvatar_margin: baseTheme.space_inline_sm,
    CardTitleAvatarSize: baseTheme.size_small,
    CardTitleAvatarSize_large: baseTheme.size_large,
    CardTitleIcon_margin: baseTheme.space_inline_sm,
    CardTitleSecondaryText_color: baseTheme.color_mouse,
    CardTitleSecondaryText_fontSize: baseTheme.fontSize_mouse,
    CardTitleSecondaryText_fontWeight: baseTheme.fontWeight_regular,
    CardSubtitle_color: baseTheme.color_mouse,
    CardSubtitle_fontSize: baseTheme.fontSize_mouse,
    CardSubtitle_fontWeight: baseTheme.fontWeight_regular,
    CardSubtitle_marginTop: baseTheme.space_stack_sm
  }, baseTheme);
};