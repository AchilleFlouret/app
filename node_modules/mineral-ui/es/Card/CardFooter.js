import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import IconExpandLess from "../Icon/IconExpandLess";
import IconExpandMore from "../Icon/IconExpandMore";
import { CardFooterRoot as Root, CardFooterContent as Content, CardFooterTitle as Title, CardFooterTitleContent as TitleContent, CardFooterToggleButton as ToggleButton } from "./styled";
import { cardFooterPropTypes } from "./propTypes";

var CardFooter =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(CardFooter, _Component);

  function CardFooter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      isOpen: !_this.props.expandable || Boolean(_this.props.defaultIsOpen)
    });

    _defineProperty(_assertThisInitialized(_this), "close", function (event) {
      if (_this.isControlled('isOpen')) {
        _this.closeActions(event);
      } else {
        _this.setState(function () {
          return {
            isOpen: false
          };
        }, function () {
          _this.closeActions(event);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "closeActions", function (event) {
      _this.props.onClose && _this.props.onClose(event);
    });

    _defineProperty(_assertThisInitialized(_this), "open", function (event) {
      if (_this.isControlled('isOpen')) {
        _this.openActions(event);
      } else {
        _this.setState(function () {
          return {
            isOpen: true
          };
        }, function () {
          _this.openActions(event);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "openActions", function (event) {
      _this.props.onOpen && _this.props.onOpen(event);
    });

    _defineProperty(_assertThisInitialized(_this), "toggleOpen", function (event) {
      var isOpen = _this.getControllableValue('isOpen');

      if (isOpen) {
        _this.close(event);
      } else {
        _this.open(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "isControlled", function (prop) {
      return _this.props.hasOwnProperty(prop);
    });

    _defineProperty(_assertThisInitialized(_this), "getControllableValue", function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    });

    return _this;
  }

  var _proto = CardFooter.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        expandable = _this$props.expandable,
        ignoreOnClose = _this$props.onClose,
        ignoreOnOpen = _this$props.onOpen,
        title = _this$props.title,
        _this$props$triggerTi = _this$props.triggerTitle,
        triggerTitle = _this$props$triggerTi === void 0 ? CardFooter.defaultProps.triggerTitle : _this$props$triggerTi,
        variant = _this$props.variant,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["children", "expandable", "onClose", "onOpen", "title", "triggerTitle", "variant"]);

    var rootProps = _objectSpread({
      variant: variant
    }, restProps);

    var isOpen = Boolean(this.getControllableValue('isOpen'));
    var ExpandCollapseIcon = isOpen ? IconExpandLess : IconExpandMore;
    return ___EmotionJSX(Root, rootProps, title && ___EmotionJSX(Title, null, ___EmotionJSX(TitleContent, null, title), expandable && ___EmotionJSX(ToggleButton, {
      iconStart: ___EmotionJSX(ExpandCollapseIcon, {
        title: triggerTitle(isOpen)
      }),
      minimal: true,
      onClick: this.toggleOpen,
      variant: variant
    })), isOpen && children && ___EmotionJSX(Content, null, children));
  };

  return CardFooter;
}(Component);

_defineProperty(CardFooter, "displayName", 'CardFooter');

_defineProperty(CardFooter, "defaultProps", {
  triggerTitle: function triggerTitle(isOpen) {
    return isOpen ? 'Collapse contents' : 'Expand contents';
  }
});

export { CardFooter as default };
CardFooter.propTypes = process.env.NODE_ENV !== "production" ? cardFooterPropTypes : {};