import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Children, cloneElement } from 'react';
import Button from "../Button";
import { SIZE } from "../Button/constants";
import { CardAction as Action, CardActionsRoot as Root } from "./styled";
import { cardActionsPropTypes } from "./propTypes";
export default function CardActions(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose(props, ["children"]);

  var actions = Children.map(children, function (child, index) {
    if (child.type === Button) {
      child = cloneElement(child, {
        size: SIZE.medium
      });
    }

    return ___EmotionJSX(Action, {
      key: index
    }, child);
  });
  return ___EmotionJSX(Root, restProps, actions);
}
CardActions.displayName = 'CardActions';
CardActions.propTypes = process.env.NODE_ENV !== "production" ? cardActionsPropTypes : {};