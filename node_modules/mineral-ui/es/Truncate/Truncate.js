import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import debounce from 'lodash.debounce';
import EventListener from "../EventListener";
import { TruncateRoot as Root, Tooltip } from "./styled";

var Truncate =
/*#__PURE__*/
function (_PureComponent) {
  _inheritsLoose(Truncate, _PureComponent);

  function Truncate() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      showTooltip: false
    });

    _defineProperty(_assertThisInitialized(_this), "root", void 0);

    _defineProperty(_assertThisInitialized(_this), "setRootRef", function (node) {
      _this.root = node;
    });

    _defineProperty(_assertThisInitialized(_this), "toggleTooltip", function () {
      var rootNode = _this.root;

      if (rootNode) {
        var offsetWidth = rootNode.offsetWidth + 1; // `+ 1` necessary for Edge & IE11

        var showTooltip = Boolean(rootNode.scrollWidth > offsetWidth);

        if (_this.state.showTooltip !== showTooltip) {
          _this.setState({
            showTooltip: showTooltip
          });
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleWindowResize", debounce(_this.toggleTooltip, 100));

    return _this;
  }

  var _proto = Truncate.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.toggleTooltip();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.toggleTooltip();
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["children"]);

    var showTooltip = this.state.showTooltip;

    var rootProps = _objectSpread({
      ref: this.setRootRef,
      showTooltip: showTooltip
    }, restProps);

    var content = ___EmotionJSX(Root, rootProps, children, ___EmotionJSX(EventListener, {
      listeners: [{
        target: 'window',
        event: 'resize',
        handler: this.handleWindowResize
      }]
    }));

    return this.root && showTooltip ? ___EmotionJSX(Tooltip, {
      content: this.root.textContent
    }, content) : content;
  };

  return Truncate;
}(PureComponent);

_defineProperty(Truncate, "displayName", 'Truncate');

export { Truncate as default };