import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import { generateId } from "../utils";
import { IconRoot as Root } from "./styled";
import { SIZE } from "./constants";
import { iconPropTypes } from "./propTypes";

var Icon =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Icon, _Component);

  function Icon() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "id", "icon-" + generateId());

    return _this;
  }

  var _proto = Icon.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        title = _this$props.title,
        children = _this$props.children,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["title", "children"]);

    var titleElementId = "icon-title-" + this.id;

    var rootProps = _objectSpread({
      'aria-hidden': title ? null : true,
      'aria-labelledby': title && titleElementId,
      focusable: 'false',
      role: 'img',
      viewBox: '0 0 24 24'
    }, restProps);

    var titleProps = {
      id: titleElementId
    };
    return ___EmotionJSX(Root, rootProps, title && ___EmotionJSX("title", titleProps, title), children);
  };

  return Icon;
}(Component);

_defineProperty(Icon, "displayName", 'Icon');

_defineProperty(Icon, "defaultProps", {
  size: SIZE.medium
});

export { Icon as default };
Icon.propTypes = process.env.NODE_ENV !== "production" ? iconPropTypes : {};