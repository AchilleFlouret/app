function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { Component } from 'react';
import { canUseDOM, canUseEventListeners } from 'exenv';

var EventListener =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(EventListener, _Component);

  function EventListener() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = EventListener.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.addEventListeners();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    this.removeEventListeners(prevProps.listeners);
    this.addEventListeners();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.removeEventListeners();
  };

  _proto.render = function render() {
    return null;
  };

  _proto.getTargetNode = function getTargetNode(target) {
    if (canUseDOM) {
      return global[target] || global.document.querySelector(target);
    }
  };

  _proto.addEventListeners = function addEventListeners(listeners) {
    var _this = this;

    if (listeners === void 0) {
      listeners = this.props.listeners;
    }

    if (canUseEventListeners) {
      listeners.forEach(function (_ref) {
        var target = _ref.target,
            event = _ref.event,
            handler = _ref.handler,
            options = _ref.options;

        var node = _this.getTargetNode(target);

        node && node.addEventListener(event, handler, options);
      });
    }
  };

  _proto.removeEventListeners = function removeEventListeners(listeners) {
    var _this2 = this;

    if (listeners === void 0) {
      listeners = this.props.listeners;
    }

    if (canUseEventListeners) {
      listeners.forEach(function (_ref2) {
        var target = _ref2.target,
            event = _ref2.event,
            handler = _ref2.handler,
            options = _ref2.options;

        var node = _this2.getTargetNode(target);

        node && node.removeEventListener(event, handler, options);
      });
    }
  };

  return EventListener;
}(Component);

_defineProperty(EventListener, "displayName", 'EventListener');

export { EventListener as default };