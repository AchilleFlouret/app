import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import { FlexItem } from "../Flex";
import { FormField } from "../Form";
import Select from "../Select";

var PageSizer =
/*#__PURE__*/
function (_PureComponent) {
  _inheritsLoose(PageSizer, _PureComponent);

  function PageSizer() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "handleSelect", function (item) {
      var pageSize = parseInt(item.value);

      _this.props.onPageSizeChange(pageSize);
    });

    return _this;
  }

  var _proto = PageSizer.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        currentPage = _this$props.currentPage,
        messages = _this$props.messages,
        ignoreOnPageSizeChange = _this$props.onPageSizeChange,
        pageSize = _this$props.pageSize,
        pageSizes = _this$props.pageSizes,
        size = _this$props.size,
        totalCount = _this$props.totalCount,
        totalPages = _this$props.totalPages,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["currentPage", "messages", "onPageSizeChange", "pageSize", "pageSizes", "size", "totalCount", "totalPages"]);

    var rootProps = _objectSpread({}, restProps);

    if (pageSizes.indexOf(pageSize) === -1) {
      throw new Error('pageSizes array does not include pageSize');
    }

    var category = messages.category,
        itemText = messages.itemText,
        status = messages.status;
    var data = pageSizes.map(function (pageSize) {
      return {
        text: itemText(pageSize),
        value: pageSize.toString()
      };
    });
    var first = (currentPage - 1) * pageSize + 1;
    var last = first + pageSize - 1;
    var lastPage = currentPage === totalPages;
    var pageSizerDescription = status(category, first, lastPage ? totalCount : last, totalCount);
    var inputProps = {
      data: data,
      defaultSelectedItem: data.find(function (item) {
        return parseInt(item.value) === pageSize;
      }),
      label: pageSizerDescription,
      hideLabel: true,
      input: Select,
      caption: pageSizerDescription,
      onChange: this.handleSelect,
      size: size
    };
    return ___EmotionJSX(FlexItem, rootProps, ___EmotionJSX(FormField, inputProps));
  };

  return PageSizer;
}(PureComponent);

_defineProperty(PageSizer, "displayName", 'PageSizer');

export { PageSizer as default };