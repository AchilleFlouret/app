import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import hoistNonReactStatics from 'hoist-non-react-statics';
import wrapDisplayName from 'recompose/wrapDisplayName';
import { withTheme } from 'emotion-theming';
import ThemeProvider from "./ThemeProvider";

// Usage: themed(component)(theme)
var themed = function themed(WrappedComponent) {
  return function (theme) {
    var Wrapper = function Wrapper(props, context) {
      var outTheme = typeof theme === 'function' ? theme(props, context) : theme;

      var ignore = props.theme,
          outProps = _objectWithoutPropertiesLoose(props, ["theme"]);

      return ___EmotionJSX(ThemeProvider, {
        theme: outTheme
      }, ___EmotionJSX(WrappedComponent, outProps));
    }; // $FlowFixMe - `WrappedComponent.propTypes` missing in `React.AbstractComponentStatics`


    Wrapper.propTypes = process.env.NODE_ENV !== "production" ? WrappedComponent.propTypes : {};
    Wrapper.displayName = wrapDisplayName(WrappedComponent, 'Themed');
    hoistNonReactStatics(Wrapper, WrappedComponent);
    return withTheme(Wrapper);
  };
};

export default themed;