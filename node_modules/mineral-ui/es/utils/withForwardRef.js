import { jsx as ___EmotionJSX } from "@emotion/core";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import wrapDisplayName from 'recompose/wrapDisplayName';
import hoistNonReactStatics from 'hoist-non-react-statics';
export default function withForwardRef(WrappedComponent) {
  var Wrapper = forwardRef(function (props, ref) {
    return ___EmotionJSX(WrappedComponent, _extends({}, props, {
      forwardedRef: ref
    }));
  });
  Wrapper.displayName = wrapDisplayName(WrappedComponent, 'WithForwardRef'); // $FlowFixMe - defaultProps missing in React.AbstractComponentStatics

  Wrapper.defaultProps = WrappedComponent.defaultProps; // $FlowFixMe - defaultProps missing in React.AbstractComponentStatics

  Wrapper.propTypes = WrappedComponent.propTypes;
  hoistNonReactStatics(Wrapper, WrappedComponent);
  return Wrapper;
}