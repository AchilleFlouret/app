import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import { TextRoot as Root } from "./styled";
import ElementContext from "./ElementContext";
import { APPEARANCE } from "./constants";

var TextProvider =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(TextProvider, _Component);

  function TextProvider() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = TextProvider.prototype;

  _proto.render = function render() {
    var _TextProvider$default = TextProvider.defaultProps,
        defaultAppearance = _TextProvider$default.appearance,
        defaultAs = _TextProvider$default.as;

    var _this$props = this.props,
        as = _this$props.as,
        parentAs = _this$props.parentAs,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["as", "parentAs"]);

    var rootProps = _objectSpread({
      as: parentAs === defaultAppearance && as === defaultAs ? 'span' : as,
      defaultAppearance: defaultAppearance
    }, restProps);

    return ___EmotionJSX(ElementContext.Provider, {
      value: this.props.as
    }, ___EmotionJSX(Root, rootProps));
  };

  return TextProvider;
}(Component);

_defineProperty(TextProvider, "displayName", 'TextProvider');

_defineProperty(TextProvider, "defaultProps", {
  appearance: APPEARANCE.p,
  as: 'p'
});

export { TextProvider as default };