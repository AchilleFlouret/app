import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import ElementContext from "./ElementContext";
import TextProvider from "./TextProvider";
import { APPEARANCE } from "./constants";
import { textPropTypes } from "./propTypes";

var Text =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Text, _Component);

  function Text() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Text.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        inherit = _this$props.inherit,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["inherit"]);

    return ___EmotionJSX(ElementContext.Consumer, null, function (parentAs) {
      var rootProps = _objectSpread({
        inherit: inherit === false || !parentAs ? inherit : true,
        parentAs: parentAs
      }, restProps);

      return ___EmotionJSX(TextProvider, rootProps);
    });
  };

  return Text;
}(Component);

_defineProperty(Text, "displayName", 'Text');

_defineProperty(Text, "defaultProps", {
  appearance: APPEARANCE.p
});

export { Text as default };
Text.propTypes = process.env.NODE_ENV !== "production" ? textPropTypes : {};