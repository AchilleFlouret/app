import _styled from "@emotion/styled-base";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { overflowContainerTheme } from "./themes";
import { overflowContainerWithShadowsTheme } from "./themes";
export var OverflowContainerRoot =
/*#__PURE__*/
_styled('div', {
  target: "e15wloii0"
})(function (_ref) {
  var hideScrollbars = _ref.hideScrollbars,
      scrollX = _ref.scrollX,
      scrollY = _ref.scrollY,
      baseTheme = _ref.theme;
  var theme = overflowContainerTheme(baseTheme);
  return _objectSpread({
    outline: 0,
    overflowX: scrollX ? 'auto' : undefined,
    overflowY: scrollY ? 'auto' : undefined,
    // Prevent flash of focus style when interacting with children
    transition: 'outline 0.1s 0.25s',
    '&:focus': {
      outline: theme.OverflowContainer_outline_focus
    }
  }, hideScrollbars ? {
    overflow: '-moz-scrollbars-none',
    msOverflowStyle: 'none',
    '&::-webkit-scrollbar': {
      display: 'none'
    }
  } : undefined);
});
export var OverflowContainerWithShadowsRoot =
/*#__PURE__*/
_styled('div', {
  target: "e15wloii1"
})(function (props) {
  var boxShadow = getBoxShadows(props);
  return boxShadow ? {
    display: 'flex',
    position: 'relative',
    '&::before': {
      bottom: 0,
      boxShadow: boxShadow,
      content: '""',
      pointerEvents: 'none',
      position: 'absolute',
      left: 0,
      right: 0,
      top: 0
    }
  } : undefined;
});

var getBoxShadows = function getBoxShadows(_ref2) {
  var baseTheme = _ref2.theme,
      restProps = _objectWithoutPropertiesLoose(_ref2, ["theme"]);

  var theme = overflowContainerWithShadowsTheme(baseTheme);
  var boxShadows = Object.keys(restProps).filter(function (prop) {
    return prop.indexOf('hasShadow') !== -1;
  }).reduce(function (acc, prop) {
    if (restProps[prop]) {
      var edge = prop.split('hasShadow')[1];
      acc.push(theme["OverflowContainerWithShadows_boxShadow" + edge]);
    }

    return acc;
  }, []);
  return boxShadows.length ? boxShadows.join(',') : undefined;
};

export var getScrollerStyles = function getScrollerStyles(_ref3) {
  var scrollX = _ref3.scrollX,
      scrollY = _ref3.scrollY;
  return _objectSpread({
    flex: '1 1 auto'
  }, scrollX ? {
    overflowY: 'hidden',
    paddingLeft: 2,
    // [1]
    paddingRight: 2 // [1]

  } : undefined, scrollY ? {
    overflowX: 'hidden',
    paddingBottom: 2,
    // [1]
    paddingTop: 2 // [1]

  } : undefined);
};