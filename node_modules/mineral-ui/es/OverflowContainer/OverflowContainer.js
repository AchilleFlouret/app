import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import debounce from 'lodash.debounce';
import EventListener from "../EventListener";
import { OverflowContainerRoot as Root } from "./styled";

var OverflowContainer =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(OverflowContainer, _Component);

  function OverflowContainer() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      scrollable: false
    });

    _defineProperty(_assertThisInitialized(_this), "container", void 0);

    _defineProperty(_assertThisInitialized(_this), "setContainerRef", function (node) {
      var containerRef = _this.props.containerRef;
      _this.container = node;
      containerRef && containerRef(node);
    });

    _defineProperty(_assertThisInitialized(_this), "updateScrollable", function () {
      var _this$props = _this.props,
          scrollX = _this$props.scrollX,
          scrollY = _this$props.scrollY;
      var node = _this.container;

      if (node) {
        var scrollable = Boolean(scrollX && node.scrollWidth > node.clientWidth || scrollY && node.scrollHeight > node.clientHeight);

        if (_this.state.scrollable !== scrollable) {
          _this.setState({
            scrollable: scrollable
          });
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleWindowResize", debounce(_this.updateScrollable, 500));

    return _this;
  }

  var _proto = OverflowContainer.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.updateScrollable();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.updateScrollable();
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        children = _this$props2.children,
        tabIndex = _this$props2.tabIndex,
        restProps = _objectWithoutPropertiesLoose(_this$props2, ["children", "tabIndex"]);

    var rootProps = _objectSpread({
      ref: this.setContainerRef
    }, tabIndex !== undefined ? {
      tabIndex: tabIndex
    } : this.state.scrollable ? {
      tabIndex: 0
    } : undefined, restProps);

    return ___EmotionJSX(Root, rootProps, children, ___EmotionJSX(EventListener, {
      listeners: [{
        target: 'window',
        event: 'resize',
        handler: this.handleWindowResize
      }]
    }));
  };

  return OverflowContainer;
}(Component);

_defineProperty(OverflowContainer, "displayName", 'OverflowContainer');

export { OverflowContainer as default };