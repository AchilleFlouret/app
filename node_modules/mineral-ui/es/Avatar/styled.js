import _styled from "@emotion/styled-base";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import isPropValid from '@emotion/is-prop-valid';
import { componentStyleReset } from "../styles";
import { SHAPE } from "./constants";
import { avatarTheme } from "./themes";
export var AvatarRoot =
/*#__PURE__*/
_styled('span', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return ['color', 'shape', 'size'].indexOf(prop) === -1 && isPropValid(prop);
  },
  target: "e15mnca50"
})(function (_ref) {
  var background = _ref.background,
      propColor = _ref.color,
      icon = _ref.icon,
      noBackground = _ref.noBackground,
      shape = _ref.shape,
      propSize = _ref.size,
      baseTheme = _ref.theme;
  var theme = avatarTheme(baseTheme);
  var color = propColor || theme.color_themePrimary;
  var size = theme["Avatar_size_" + propSize];
  return _objectSpread({}, componentStyleReset(baseTheme), {
    alignItems: 'center',
    backgroundColor: noBackground ? null : background || theme.color_theme_60,
    color: color,
    borderRadius: shape === SHAPE.square ? null : shape === SHAPE.rounded ? theme.borderRadius_1 : '100%',
    display: 'inline-flex',
    fontWeight: theme.Avatar_fontWeight,
    height: size,
    lineHeight: size,
    justifyContent: 'center',
    verticalAlign: 'middle',
    width: size,
    '& > abbr,& > span': {
      fontSize: icon ? null : theme["Avatar_fontSize_" + propSize]
    },
    '& > abbr': {
      textDecoration: 'none'
    },
    '& > img': {
      borderRadius: '100%',
      display: 'block',
      flex: '0 0 auto',
      maxWidth: '100%'
    },
    '& > [role="img"]': {
      color: color
    }
  });
});