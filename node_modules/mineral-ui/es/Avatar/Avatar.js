import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Children, cloneElement, Component } from 'react';
import { AvatarRoot as Root } from "./styled";
import { ICON_SIZE, SHAPE, SIZE } from "./constants";
import { avatarPropTypes } from "./propTypes";

var Avatar =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Avatar, _Component);

  function Avatar() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Avatar.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        abbr = _this$props.abbr,
        children = _this$props.children,
        size = _this$props.size,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["abbr", "children", "size"]);

    var icon, noBackground, text;
    Children.map(children, function (child) {
      if (typeof child === 'string') {
        text = abbr || child.length > 1 ? ___EmotionJSX("abbr", {
          title: child
        }, abbr || child.charAt(0)) : ___EmotionJSX("span", null, child);
      } else if (child.type && child.type.displayName && child.type.displayName.indexOf('Icon') !== -1) {
        icon = cloneElement(child, {
          size: ICON_SIZE[size || Avatar.defaultProps.size]
        });
      } else {
        noBackground = true;
      }
    });

    var rootProps = _objectSpread({
      icon: icon,
      noBackground: noBackground,
      size: size
    }, restProps);

    return ___EmotionJSX(Root, rootProps, text || icon || children);
  };

  return Avatar;
}(Component);

_defineProperty(Avatar, "displayName", 'Avatar');

_defineProperty(Avatar, "defaultProps", {
  shape: SHAPE.circle,
  size: SIZE.large
});

export { Avatar as default };
Avatar.propTypes = process.env.NODE_ENV !== "production" ? avatarPropTypes : {};