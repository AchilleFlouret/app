import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import { MenuRoot as Root } from "./styled";
import MenuDivider from "./MenuDivider";
import MenuGroup from "./MenuGroup";
import MenuItem from "./MenuItem";
import { menuPropTypes } from "./propTypes";
export var getItems = function getItems(data) {
  return data.filter(function (item) {
    return !item.divider && !item.group;
  });
};

var Menu =
/*#__PURE__*/
function (_PureComponent) {
  _inheritsLoose(Menu, _PureComponent);

  function Menu() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "renderFromData", function (data) {
      var highlightedIndex = _this.props.highlightedIndex;
      var index = 0;
      return data.map(function (item) {
        return _this.renderItem({
          props: {
            isHighlighted: highlightedIndex === index,
            index: item.divider || item.group ? index : index++,
            item: item
          }
        });
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getItemProps", function (props) {
      if (props === void 0) {
        props = {};
      }

      var _props = props,
          itemProps = _props.props;
      var index = itemProps.index,
          item = itemProps.item;
      var _this$props = _this.props,
          render = _this$props.item,
          itemKey = _this$props.itemKey;
      return _objectSpread({}, itemProps, item, {
        children: item.text,
        key: item[itemKey] || index,
        render: render
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderItem", function (props) {
      if (props === void 0) {
        props = {};
      }

      var _props2 = props,
          itemProps = _props2.props;
      var index = itemProps.index,
          item = itemProps.item;

      if (item.group) {
        return ___EmotionJSX(MenuGroup, {
          key: index,
          title: item.title
        });
      } else if (item.divider) {
        return ___EmotionJSX(MenuDivider, {
          key: index
        });
      } else {
        return ___EmotionJSX(MenuItem, _this.getItemProps(props));
      }
    });

    return _this;
  }

  var _proto = Menu.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        children = _this$props2.children,
        data = _this$props2.data,
        rootProps = _objectWithoutPropertiesLoose(_this$props2, ["children", "data"]);

    return ___EmotionJSX(Root, rootProps, data ? this.renderFromData(data) : children);
  };

  return Menu;
}(PureComponent);

_defineProperty(Menu, "displayName", 'Menu');

export { Menu as default };
Menu.propTypes = process.env.NODE_ENV !== "production" ? menuPropTypes : {};