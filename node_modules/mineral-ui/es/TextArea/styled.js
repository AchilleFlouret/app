import _styled from "@emotion/styled-base";
import isPropValid from '@emotion/is-prop-valid';
import { getNormalizedValue, pxToEm } from "../styles";
import { themed, mapComponentThemes } from "../themes";
import FauxControl from "../FauxControl";
import { textAreaTheme } from "./themes";
var ThemedFauxControl = themed(FauxControl)(function (_ref) {
  var baseTheme = _ref.theme;
  return mapComponentThemes({
    name: 'TextArea',
    theme: textAreaTheme(baseTheme)
  }, {
    name: 'FauxControl',
    theme: {}
  }, baseTheme);
});
export var TextAreaRoot =
/*#__PURE__*/
_styled(ThemedFauxControl, {
  target: "ecgwh2i0"
})({
  name: "6sun7c",
  styles: "align-items:center;cursor:text;display:flex;width:100%;"
});
export var Input =
/*#__PURE__*/
_styled('textarea', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'size' && isPropValid(prop);
  },
  target: "ecgwh2i1"
})(function (_ref2) {
  var resizeable = _ref2.resizeable,
      size = _ref2.size,
      baseTheme = _ref2.theme;
  var theme = textAreaTheme(baseTheme);
  var fontSize = size === 'small' ? theme.TextArea_fontSize_small : theme.TextArea_fontSize;
  var paddingVerticalNormalized = getNormalizedValue(theme["TextArea_paddingVertical_" + size], fontSize);
  return {
    backgroundColor: 'transparent',
    border: 0,
    boxShadow: 'none',
    flex: '1 1 auto',
    fontFamily: 'inherit',
    lineHeight: theme.lineHeight_prose,
    margin: theme.TextArea_borderWidth,
    // minHeight value is an attempt to display a single line of text.
    // It is needed when a user manually resizes a textarea.
    minHeight: parseFloat(paddingVerticalNormalized) * 2 + parseFloat(theme.TextArea_fontSize) * parseFloat(theme.lineHeight) + parseFloat(pxToEm(parseFloat(theme.TextArea_borderWidth) * 2)) + parseFloat(pxToEm(2)) + "em",
    minWidth: 0,
    outline: 0,
    paddingBottom: paddingVerticalNormalized,
    paddingTop: paddingVerticalNormalized,
    resize: resizeable ? 'vertical' : 'none',
    width: '100%'
  };
});