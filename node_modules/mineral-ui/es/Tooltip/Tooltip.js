import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Children, cloneElement, Component } from 'react';
import { composeEventHandlers, generateId } from "../utils";
import PopoverContent from "../Popover/PopoverContent";
import { TooltipRoot as Root, TriggerText } from "./styled";
import { DELAY_OPEN, PLACEMENT } from "./constants";
import { tooltipPropTypes } from "./propTypes";

var Tooltip =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Tooltip, _Component);

  function Tooltip() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      isOpen: Boolean(_this.props.defaultIsOpen)
    });

    _defineProperty(_assertThisInitialized(_this), "id", _this.props.id || "tooltip-" + generateId());

    _defineProperty(_assertThisInitialized(_this), "openTimer", void 0);

    _defineProperty(_assertThisInitialized(_this), "getTriggerProps", function (props) {
      if (props === void 0) {
        props = {};
      }

      return _objectSpread({}, props, {
        'aria-expanded': undefined,
        onBlur: composeEventHandlers(props.onBlur, _this.close),
        onFocus: composeEventHandlers(props.onFocus, _this.handleDelayedOpen),
        onMouseEnter: composeEventHandlers(props.onMouseEnter, _this.handleDelayedOpen),
        onMouseLeave: composeEventHandlers(props.onMouseLeave, _this.close),
        tabIndex: 0
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderTrigger", function () {
      var children = _this.props.children;
      var trigger = typeof children === 'string' ? ___EmotionJSX(TriggerText, null, children) : children;
      var child = Children.only(trigger);
      return cloneElement(child, _this.getTriggerProps(child.props));
    });

    _defineProperty(_assertThisInitialized(_this), "getContentProps", function (props) {
      if (props === void 0) {
        props = {};
      }

      var content = _this.props.content;

      var _props = props,
          ignoreTabIndex = _props.tabIndex,
          restProps = _objectWithoutPropertiesLoose(_props, ["tabIndex"]);

      return _objectSpread({}, restProps, {
        'aria-live': 'polite',
        children: content,
        role: 'tooltip'
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderContent", function (_temp) {
      var _ref = _temp === void 0 ? {} : _temp,
          props = _ref.props;

      return ___EmotionJSX(PopoverContent, _this.getContentProps(props));
    });

    _defineProperty(_assertThisInitialized(_this), "handleDelayedOpen", function (event) {
      _this.clearOpenTimer();

      var isOpen = _this.getControllableValue('isOpen');

      if (!isOpen) {
        _this.openTimer = global.setTimeout(function () {
          _this.open(event);
        }, DELAY_OPEN);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "clearOpenTimer", function () {
      global.clearTimeout(_this.openTimer);
      _this.openTimer = null;
    });

    _defineProperty(_assertThisInitialized(_this), "open", function (event) {
      if (_this.isControlled('isOpen')) {
        _this.openActions(event);
      } else {
        _this.setState({
          isOpen: true
        }, function () {
          _this.openActions(event);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "openActions", function (event) {
      _this.props.onOpen && _this.props.onOpen(event);
    });

    _defineProperty(_assertThisInitialized(_this), "close", function (event) {
      _this.clearOpenTimer();

      if (_this.isControlled('isOpen')) {
        _this.closeActions(event);
      } else {
        _this.setState({
          isOpen: false
        }, function () {
          _this.closeActions(event);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "closeActions", function (event) {
      _this.props.onClose && _this.props.onClose(event);
    });

    _defineProperty(_assertThisInitialized(_this), "isControlled", function (prop) {
      return _this.props.hasOwnProperty(prop);
    });

    _defineProperty(_assertThisInitialized(_this), "getControllableValue", function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    });

    return _this;
  }

  var _proto = Tooltip.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.clearOpenTimer();
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        disabled = _this$props.disabled,
        ignoreSubtitle = _this$props.subtitle,
        ignoreTitle = _this$props.title,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["children", "disabled", "subtitle", "title"]);

    if (disabled) {
      return children;
    }

    var popoverProps = _objectSpread({}, restProps, {
      children: this.renderTrigger(),
      focusTriggerOnClose: false,
      id: this.id,
      isOpen: this.getControllableValue('isOpen'),
      onClose: this.close,
      onOpen: this.open,
      content: this.renderContent
    });

    return ___EmotionJSX(Root, popoverProps);
  };

  return Tooltip;
}(Component);

_defineProperty(Tooltip, "displayName", 'Tooltip');

_defineProperty(Tooltip, "defaultProps", {
  hasArrow: true,
  placement: PLACEMENT.bottom
});

export { Tooltip as default };
Tooltip.propTypes = process.env.NODE_ENV !== "production" ? tooltipPropTypes : {};