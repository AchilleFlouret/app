import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { SIZE as BUTTON_SIZE } from "../Button/constants";
import Truncate from "../Truncate";
import { INTERNAL_TYPE } from "./constants";
import { NavItemRoot } from "./styled";

var NavItem = function NavItem(props) {
  var children = props.children,
      disabled = props.disabled,
      icon = props.icon,
      index = props.index,
      ignoreMinimal = props.minimal,
      selected = props.selected,
      type = props.type,
      restProps = _objectWithoutPropertiesLoose(props, ["children", "disabled", "icon", "index", "minimal", "selected", "type"]);

  var rootProps = _objectSpread({
    'aria-disabled': disabled,
    'aria-current': selected ? 'page' : undefined,
    circular: type === INTERNAL_TYPE.pills,
    'data-index': index,
    disabled: disabled,
    iconStart: icon,
    selected: selected,
    size: type === INTERNAL_TYPE.pills ? BUTTON_SIZE.small : type === INTERNAL_TYPE.tabs ? BUTTON_SIZE.medium : BUTTON_SIZE.large,
    type: type
  }, restProps);

  return ___EmotionJSX(NavItemRoot, rootProps, ___EmotionJSX(Truncate, null, children));
};

NavItem.displayName = 'NavItem';
export default NavItem;