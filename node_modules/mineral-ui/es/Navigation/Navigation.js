import { jsx as ___EmotionJSX } from "@emotion/core";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Children, cloneElement, Component } from 'react';
import composeEventHandlers from "../utils/composeEventHandlers";
import { INTERNAL_TYPE, PREFIX } from "./constants";
import { NavigationRoot } from "./styled";
import NavItem from "./NavItem";
import NavOverflowMenu from "./NavOverflowMenu";

// If we render `a` with an `href` for items, we need to preventDefault() to "disable" it
var preventDefaultEventFn = function preventDefaultEventFn(event) {
  event.preventDefault();
};

var Navigation =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Navigation, _Component);

  function Navigation() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "renderItems", function (prefixAndType) {
      var _this$props = _this.props,
          align = _this$props.align,
          children = _this$props.children,
          itemAs = _this$props.itemAs,
          itemsProp = _this$props.items,
          maxItemWidth = _this$props.maxItemWidth,
          messages = _this$props.messages,
          minimal = _this$props.minimal,
          ignoreOnChange = _this$props.onChange,
          overflowAtIndex = _this$props.overflowAtIndex,
          secondary = _this$props.secondary,
          selectedIndex = _this$props.selectedIndex,
          ignoreType = _this$props.type;
      var items = children ? Children.map(children, function (child) {
        var _child$props = child.props,
            children = _child$props.children,
            rest = _objectWithoutPropertiesLoose(_child$props, ["children"]);

        return _objectSpread({
          child: child,
          text: children
        }, rest);
      }) : itemsProp;
      var overflowData;

      if (items && overflowAtIndex) {
        overflowData = items.slice(overflowAtIndex);
      }

      var navChildren;

      if (items && items.length) {
        navChildren = items.map(function (_ref, index) {
          var as = _ref.as,
              child = _ref.child,
              disabled = _ref.disabled,
              maxWidth = _ref.maxWidth,
              onClick = _ref.onClick,
              selected = _ref.selected,
              text = _ref.text,
              restItem = _objectWithoutPropertiesLoose(_ref, ["as", "child", "disabled", "maxWidth", "onClick", "selected", "text"]);

          if (overflowAtIndex && index >= overflowAtIndex) {
            if (index === overflowAtIndex) {
              var menuProps = _objectSpread({
                data: overflowData,
                onClick: _this.handleClick,
                index: index,
                itemAs: itemAs,
                messages: messages
              }, prefixAndType);

              return ___EmotionJSX(NavOverflowMenu, _extends({
                key: index
              }, menuProps));
            } else {
              return null;
            }
          } else {
            var navItemProps = _objectSpread({
              align: align,
              children: text,
              disabled: disabled,
              as: as || itemAs || 'a',
              index: index,
              maxWidth: maxWidth || maxItemWidth,
              minimal: minimal,
              onClick: !disabled ? composeEventHandlers(onClick, function (event) {
                _this.handleClick(event, index);
              }) : preventDefaultEventFn,
              secondary: secondary,
              selected: selected || index === selectedIndex
            }, prefixAndType, restItem);

            return child ? cloneElement(child, _objectSpread({
              key: index
            }, navItemProps)) : ___EmotionJSX(NavItem, _extends({
              key: index
            }, navItemProps));
          }
        });
      }

      return navChildren;
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (event, selectedIndex) {
      var onChange = _this.props.onChange;
      event.persist();
      onChange && onChange(selectedIndex, event);
    });

    return _this;
  }

  var _proto = Navigation.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        align = _this$props2.align,
        ignoreItems = _this$props2.items,
        minimal = _this$props2.minimal,
        secondary = _this$props2.secondary,
        typeProp = _this$props2.type,
        restProps = _objectWithoutPropertiesLoose(_this$props2, ["align", "items", "minimal", "secondary", "type"]);

    var prefix = secondary ? PREFIX.secondary : PREFIX.primary;
    var type = typeProp ? "_" + typeProp : minimal ? INTERNAL_TYPE.minimal : INTERNAL_TYPE.none;

    var rootProps = _objectSpread({
      align: align,
      prefix: prefix,
      type: type
    }, restProps);

    return ___EmotionJSX(NavigationRoot, rootProps, this.renderItems({
      prefix: prefix,
      type: type
    }));
  };

  return Navigation;
}(Component);

_defineProperty(Navigation, "displayName", 'Navigation');

_defineProperty(Navigation, "defaultProps", {
  itemAs: 'a',
  maxItemWidth: '8.5em',
  messages: {
    moreLabel: 'More navigation items',
    moreText: 'More'
  }
});

export { Navigation as default };