import { jsx as ___EmotionJSX } from "@emotion/core";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import composeEventHandlers from "../utils/composeEventHandlers";
import Dropdown from "../Dropdown";
import IconArrowDropdownDown from "../Icon/IconArrowDropdownDown";
import { MenuItem } from "../Menu";
import NavItem from "./NavItem";

var getDropdownData = function getDropdownData(_ref) {
  var data = _ref.data,
      onClick = _ref.onClick,
      startingIndex = _ref.startingIndex;
  return data.map(function (_ref2, index) {
    var disabled = _ref2.disabled,
        icon = _ref2.icon,
        itemOnClick = _ref2.onClick,
        item = _objectWithoutPropertiesLoose(_ref2, ["disabled", "icon", "onClick"]);

    return _objectSpread({}, item, {
      disabled: disabled,
      iconStart: icon
    }, !disabled ? {
      onClick: composeEventHandlers(itemOnClick, function (event) {
        onClick(event, startingIndex + index);
      })
    } : undefined);
  });
}; // eslint-disable-next-line react/display-name


var getDropdownItem = function getDropdownItem(itemAs) {
  return function (props) {
    var common = {
      /*
       * MenuItem strips `onClick` from  disabled items, so we can't render an `a`
       * with an `href` and then preventDefault (like we do for items directly in
       * Navigation). Instead, we force a `span` element.
       */
      as: itemAs === NavOverflowMenu.defaultProps.itemAs && props && props.props && props.props.disabled ? 'span' : itemAs,
      role: null,
      tabIndex: -1
    };
    var itemProps = props ? _objectSpread({}, props.props, common) : common;
    return ___EmotionJSX(MenuItem, itemProps);
  };
};

var _ref3 =
/*#__PURE__*/
___EmotionJSX(IconArrowDropdownDown, null);

var NavOverflowMenu = function NavOverflowMenu(props) {
  var data = props.data,
      index = props.index,
      itemAs = props.itemAs,
      onClick = props.onClick,
      prefix = props.prefix,
      messages = props.messages,
      type = props.type;
  var rootProps = {
    data: getDropdownData({
      data: data,
      onClick: onClick,
      startingIndex: index
    }),
    item: getDropdownItem(itemAs)
  };
  var triggerProps = {
    'aria-label': messages.moreLabel,
    children: messages.moreText,
    as: 'button',
    iconEnd: _ref3,
    prefix: prefix,
    type: type
  };
  return ___EmotionJSX(Dropdown, rootProps, ___EmotionJSX(NavItem, triggerProps));
};

NavOverflowMenu.displayName = 'NavOverflowMenu';
var defaultProps = {
  itemAs: 'a'
};
NavOverflowMenu.defaultProps = defaultProps;
export default NavOverflowMenu;