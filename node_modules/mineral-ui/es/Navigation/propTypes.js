function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { arrayOf, bool, element, func, node, number, oneOf, oneOfType, shape, string } from 'prop-types';
import { ALIGN, TYPE } from "./constants";
import { menuItemPropType } from "../Menu/propTypes";
var alignPropType = oneOf(Object.keys(ALIGN));
var itemElementPropType = oneOfType([element, string]);
var maxWidthPropType = oneOfType([number, string]);
var navigationItemPropType = shape(_objectSpread({}, menuItemPropType, {
  icon: element,
  maxWidth: oneOfType([number, string])
}));
var navigationItemsPropType = arrayOf(navigationItemPropType);
var messagesPropType = shape({
  moreLabel: string.isRequired,
  moreText: string.isRequired
});
export var navItemPropTypes = {
  children: node,
  disabled: bool,
  icon: element,
  maxWidth: maxWidthPropType,
  selected: bool
};
var baseNavPropTypes = {
  align: alignPropType,
  children: node,
  itemAs: itemElementPropType,
  items: navigationItemsPropType,
  maxItemWidth: maxWidthPropType,
  messages: messagesPropType,
  onChange: func,
  overflowAtIndex: number,
  selectedIndex: number
};
export var primaryNavPropTypes = _objectSpread({}, baseNavPropTypes, {
  minimal: bool
});
export var secondaryNavPropTypes = _objectSpread({}, baseNavPropTypes, {
  type: oneOf(Object.keys(TYPE))
});