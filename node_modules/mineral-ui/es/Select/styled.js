import _styled from "@emotion/styled-base";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import isPropValid from '@emotion/is-prop-valid';
import { getNormalizedValue, pxToEm } from "../styles";
import { themed, mapComponentThemes } from "../themes";
import { ignoreSsrWarning } from "../utils/emotion";
import FauxControl from "../FauxControl";
import Dropdown from "../Dropdown/Dropdown";
import { selectTheme, selectTriggerTheme } from "./themes";
import { SIZE } from "./constants";
var ThemedDropdown = themed(Dropdown)(function (_ref) {
  var baseTheme = _ref.theme;
  return mapComponentThemes({
    name: 'Select',
    theme: selectTheme(baseTheme)
  }, {
    name: 'Dropdown',
    theme: {}
  }, baseTheme);
});
export var SelectRoot =
/*#__PURE__*/
_styled(ThemedDropdown, {
  target: "evcziml0"
})({
  name: "16w6gzw",
  styles: "width:100%;& > span{width:100%;}"
});
export var contentWidthModifier = {
  enabled: true,
  fn: function fn(data) {
    data.styles.minWidth = pxToEm(224);
    data.styles.width = pxToEm(data.offsets.reference.width);
    return data;
  }
};
var ThemedFauxControl = themed(FauxControl)(function (_ref2) {
  var baseTheme = _ref2.theme;
  return mapComponentThemes({
    name: 'Select',
    theme: selectTriggerTheme(baseTheme)
  }, {
    name: 'FauxControl',
    theme: {}
  }, baseTheme);
});
export var SelectTriggerRoot =
/*#__PURE__*/
_styled(ThemedFauxControl, {
  target: "evcziml1"
})(function (_ref3) {
  var _roleImg;

  var disabled = _ref3.disabled,
      readOnly = _ref3.readOnly,
      selectedItemVariant = _ref3.selectedItemVariant,
      baseTheme = _ref3.theme,
      variant = _ref3.variant;
  var theme = selectTriggerTheme(baseTheme);
  var rtl = theme.direction === 'rtl';
  return {
    alignItems: 'center',
    display: 'flex',
    width: '100%',
    // all icons
    '& [role="img"]': (_roleImg = {
      display: 'block',
      color: theme.SelectIcon_color,
      flex: '0 0 auto'
    }, _roleImg['&:first-child' + ignoreSsrWarning] = {
      color: disabled || readOnly ? theme.color_disabled : selectedItemVariant ? theme["color_" + selectedItemVariant] : theme.SelectIcon_color,
      margin: "0 " + theme.SelectIcon_marginHorizontal
    }, _roleImg),
    // the arrow icon
    '& :not([role="img"]) ~ [role="img"]': {
      color: disabled || readOnly ? theme.color_disabled : variant ? theme["icon_color_" + variant] : theme.SelectIcon_color
    },
    // the variant icon
    '& :not([role="img"]) + [role="img"]:not(:last-of-type)': {
      color: disabled || readOnly ? theme.color_disabled : variant ? theme["color_" + variant] : selectedItemVariant ? theme["color_" + selectedItemVariant] : theme.SelectIcon_color,
      marginLeft: rtl ? null : theme.SelectIcon_marginHorizontal,
      marginRight: rtl ? theme.SelectIcon_marginHorizontal : null
    }
  };
});
export var Trigger =
/*#__PURE__*/
_styled('div', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'size' && isPropValid(prop);
  },
  target: "evcziml2"
})(function (_ref4) {
  var size = _ref4.size,
      baseTheme = _ref4.theme;
  var theme = selectTriggerTheme(baseTheme);
  var fontSize = size === SIZE.small ? theme.Select_fontSize_small : theme.Select_fontSize;
  return {
    alignItems: 'center',
    display: 'flex',
    flex: '1 1 auto',
    height: getNormalizedValue(theme["Select_height_" + size], fontSize),
    minWidth: 0
  };
});
export var TriggerContent =
/*#__PURE__*/
_styled('span', {
  target: "evcziml3"
})(_objectSpread({}, {
  display: "inline-block",
  maxWidth: null,
  overflow: "hidden",
  textOverflow: "ellipsis",
  whiteSpace: "nowrap",
  wordWrap: "normal"
}, {
  userSelect: 'none',
  width: '100%'
}));