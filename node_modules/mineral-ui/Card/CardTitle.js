"use strict";

exports.__esModule = true;
exports.default = CardTitle;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _IconDanger = _interopRequireDefault(require("../Icon/IconDanger"));

var _IconSuccess = _interopRequireDefault(require("../Icon/IconSuccess"));

var _IconWarning = _interopRequireDefault(require("../Icon/IconWarning"));

var _styled = require("./styled");

var _propTypes = require("./propTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var variantIcons = {
  danger: (0, _core.jsx)(_IconDanger.default, {
    size: "medium"
  }),
  success: (0, _core.jsx)(_IconSuccess.default, {
    size: "medium"
  }),
  warning: (0, _core.jsx)(_IconWarning.default, {
    size: "medium"
  })
};

function CardTitle(props) {
  var actions = props.actions,
      avatar = props.avatar,
      children = props.children,
      secondaryText = props.secondaryText,
      subtitle = props.subtitle,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose(props, ["actions", "avatar", "children", "secondaryText", "subtitle", "variant"]);

  var rootProps = _objectSpread({}, restProps);

  var secondaryComponent = actions ? _react.Children.map(actions, function (action, index) {
    return (0, _react.cloneElement)(action, {
      key: index
    });
  }) : secondaryText ? (0, _core.jsx)(_styled.CardTitleSecondaryText, null, secondaryText) : null;
  return (0, _core.jsx)(_styled.CardTitleRoot, rootProps, avatar && (0, _core.jsx)(_styled.CardTitleAvatar, {
    subtitle: subtitle
  }, avatar), (0, _core.jsx)(_styled.CardTitleInner, null, (0, _core.jsx)(_styled.CardTitleTitle, {
    variant: variant
  }, variant && variantIcons[variant], (0, _core.jsx)(_styled.CardTitleTitleContent, {
    actions: actions
  }, children), secondaryComponent), subtitle && (0, _core.jsx)(_styled.CardTitleSubtitle, {
    avatar: avatar
  }, subtitle)));
}

CardTitle.displayName = 'CardTitle';
CardTitle.propTypes = process.env.NODE_ENV !== "production" ? _propTypes.cardTitlePropTypes : {};