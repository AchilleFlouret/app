"use strict";

exports.__esModule = true;
exports.popoverContentTheme = exports.popoverArrowTheme = exports.popoverTheme = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var popoverTheme = function popoverTheme(baseTheme) {
  return _objectSpread({}, popoverArrowTheme(baseTheme), popoverContentTheme(baseTheme), baseTheme);
};

exports.popoverTheme = popoverTheme;

var popoverArrowTheme = function popoverArrowTheme(baseTheme) {
  return _objectSpread({
    PopoverArrow_backgroundColor: baseTheme.panel_backgroundColor,
    PopoverArrow_borderColor: baseTheme.panel_borderColor
  }, baseTheme);
};

exports.popoverArrowTheme = popoverArrowTheme;

var popoverContentTheme = function popoverContentTheme(baseTheme) {
  return _objectSpread({
    PopoverContent_backgroundColor: baseTheme.panel_backgroundColor,
    PopoverContent_borderColor: baseTheme.panel_borderColor,
    PopoverContent_borderRadius: baseTheme.borderRadius_1,
    PopoverContent_boxShadow: baseTheme.boxShadow_2,
    PopoverContent_color: baseTheme.color,
    PopoverContent_paddingVertical: baseTheme.space_inset_sm,
    PopoverContent_maxWidth: 'none',
    PopoverContent_zIndex: baseTheme.zIndex_100,
    PopoverContentBlock_marginVertical: baseTheme.space_stack_sm,
    PopoverContentBlock_paddingHorizontal: baseTheme.space_inset_md
  }, baseTheme);
};

exports.popoverContentTheme = popoverContentTheme;