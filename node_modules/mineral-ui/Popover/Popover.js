"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _reactPopper = require("react-popper");

var _reactDom = require("react-dom");

var _utils = require("../utils");

var _ModifiersContext = _interopRequireDefault(require("../Dialog/ModifiersContext"));

var _EventListener = _interopRequireDefault(require("../EventListener"));

var _Portal = _interopRequireDefault(require("../Portal"));

var _PopoverTrigger = _interopRequireDefault(require("./PopoverTrigger"));

var _PopoverContent = _interopRequireDefault(require("./PopoverContent"));

var _styled = require("./styled");

var _constants = require("./constants");

var _propTypes = require("./propTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Popover =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Popover, _Component);

  function Popover() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      isOpen: Boolean(_this.props.defaultIsOpen)
    });

    _defineProperty(_assertThisInitialized(_this), "id", _this.props.id || "popover-" + (0, _utils.generateId)());

    _defineProperty(_assertThisInitialized(_this), "popoverContent", void 0);

    _defineProperty(_assertThisInitialized(_this), "popoverTrigger", void 0);

    _defineProperty(_assertThisInitialized(_this), "getStateAndHelpers", function () {
      return {
        state: {
          isOpen: _this.getControllableValue('isOpen')
        },
        helpers: {
          close: _this.close,
          focusTrigger: _this.focusTrigger,
          open: _this.open,
          toggleOpen: _this.toggleOpen
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "setTriggerRef", function (node) {
      var triggerRef = _this.props.triggerRef;
      _this.popoverTrigger = node;
      triggerRef && triggerRef(node);
    });

    _defineProperty(_assertThisInitialized(_this), "setContentRef", function (node) {
      _this.popoverContent = node;
    });

    _defineProperty(_assertThisInitialized(_this), "getContentProps", function (props) {
      if (props === void 0) {
        props = {};
      }

      var contentId = _this.getContentId();

      var _this$props = _this.props,
          content = _this$props.content,
          hasArrow = _this$props.hasArrow,
          modifiers = _this$props.modifiers,
          placement = _this$props.placement,
          positionFixed = _this$props.positionFixed,
          subtitle = _this$props.subtitle,
          title = _this$props.title;
      return _objectSpread({}, props, {
        hasArrow: hasArrow,
        id: contentId,
        modifiers: modifiers,
        placement: placement,
        positionFixed: positionFixed,
        ref: _this.setContentRef,
        subtitle: subtitle,
        tabIndex: 0,
        title: title,
        onBlur: (0, _utils.composeEventHandlers)(content && content.props && content.props.onBlur, _this.onBlur)
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderContent", function (props) {
      if (props === void 0) {
        props = {};
      }

      var _this$props2 = _this.props,
          content = _this$props2.content,
          usePortal = _this$props2.usePortal;
      var popoverContent;

      if ((0, _utils.isRenderProp)(content)) {
        popoverContent = content(_objectSpread({}, _this.getStateAndHelpers(), {
          props: _this.getContentProps(props)
        }));
      } else {
        popoverContent = (0, _core.jsx)(_PopoverContent.default, _this.getContentProps(props), content);
      }

      if (usePortal) {
        popoverContent = (0, _core.jsx)(_Portal.default, null, popoverContent);
      }

      return popoverContent;
    });

    _defineProperty(_assertThisInitialized(_this), "getContentId", function () {
      return _this.id + "-content";
    });

    _defineProperty(_assertThisInitialized(_this), "getTriggerProps", function (props) {
      if (props === void 0) {
        props = {};
      }

      var isOpen = _this.getControllableValue('isOpen');

      var contentId = _this.getContentId();

      var _this$props3 = _this.props,
          children = _this$props3.children,
          cursor = _this$props3.cursor,
          disabled = _this$props3.disabled;
      var child, childDisabled;

      if (!(0, _utils.isRenderProp)(children)) {
        child = children ? _react.Children.only(children) : undefined;
        childDisabled = child && child.props.disabled !== undefined;
      }

      return _objectSpread({}, (0, _utils.isRenderProp)(children) ? props : {}, {
        'aria-describedby': contentId,
        'aria-disabled': disabled,
        'aria-expanded': isOpen,
        'aria-owns': contentId,
        children: child,
        cursor: cursor,
        disabled: child && childDisabled ? childDisabled : disabled,
        ref: _this.setTriggerRef,
        role: 'button'
      }, !(0, _utils.isRenderProp)(children) ? props : {}, {
        onBlur: (0, _utils.composeEventHandlers)(props.onBlur, _this.onBlur),
        onClick: !disabled ? (0, _utils.composeEventHandlers)(props.onClick, _this.toggleOpen) : undefined
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderTrigger", function (props) {
      if (props === void 0) {
        props = {};
      }

      var children = _this.props.children;

      if ((0, _utils.isRenderProp)(children)) {
        return children(_objectSpread({}, _this.getStateAndHelpers(), {
          props: _this.getTriggerProps(props)
        }));
      }

      var child = _react.Children.only(children);

      return (0, _core.jsx)(_PopoverTrigger.default, _this.getTriggerProps(_objectSpread({}, child.props, {
        children: child
      })));
    });

    _defineProperty(_assertThisInitialized(_this), "onBlur", function (event) {
      var isOpen = _this.getControllableValue('isOpen');

      if (isOpen && _this.isEventOutsideComponent(event)) {
        _this.close(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "close", function (event) {
      if (_this.isControlled('isOpen')) {
        _this.closeActions(event);
      } else {
        _this.setState(function () {
          return {
            isOpen: false
          };
        }, function () {
          _this.closeActions(event);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "closeActions", function (event) {
      var _this$props4 = _this.props,
          focusTriggerOnClose = _this$props4.focusTriggerOnClose,
          onClose = _this$props4.onClose;
      onClose && onClose(event);

      var isOpen = _this.getControllableValue('isOpen');

      !isOpen && focusTriggerOnClose && _this.focusTrigger();
    });

    _defineProperty(_assertThisInitialized(_this), "focusTrigger", function () {
      var node = _this.popoverTrigger;

      if (!node) {
        return;
      }

      var element = node instanceof HTMLButtonElement || node.getAttribute('role') === 'button' ? node : node.firstChild instanceof HTMLElement ? node.firstChild : null;
      element && element.focus();
    });

    _defineProperty(_assertThisInitialized(_this), "handleDocumentClick", function (event) {
      if (_this.isEventOutsideComponent(event)) {
        _this.close(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleDocumentKeydown", function (event) {
      if (event.key.indexOf('Esc') === 0) {
        event.preventDefault();

        _this.close(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "isEventOutsideComponent", function (event) {
      /* eslint-disable react/no-find-dom-node */
      var usePortal = _this.props.usePortal;
      var node = (0, _reactDom.findDOMNode)(_assertThisInitialized(_this));
      var popoverContentNode = _this.popoverContent;
      var target = event.type === 'blur' && event.relatedTarget && popoverContentNode === event.target ? event.relatedTarget : event.target;

      if (usePortal) {
        return node && node instanceof HTMLElement && target && target instanceof HTMLElement && !node.contains(target) && popoverContentNode && !popoverContentNode.contains(target);
      } else {
        return node && node instanceof HTMLElement && target && target instanceof HTMLElement && !node.contains(target);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "open", function (event) {
      if (_this.isControlled('isOpen')) {
        _this.openActions(event);
      } else {
        _this.setState(function () {
          return {
            isOpen: true
          };
        }, function () {
          _this.openActions(event);
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "openActions", function (event) {
      _this.focusTrigger();

      _this.props.onOpen && _this.props.onOpen(event);
    });

    _defineProperty(_assertThisInitialized(_this), "toggleOpen", function (event) {
      var isOpen = _this.getControllableValue('isOpen');

      if (isOpen) {
        _this.close(event);
      } else {
        _this.open(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "isControlled", function (prop) {
      return _this.props.hasOwnProperty(prop);
    });

    _defineProperty(_assertThisInitialized(_this), "getControllableValue", function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    });

    return _this;
  }

  var _proto = Popover.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return (0, _core.jsx)(_ModifiersContext.default.Consumer, null, function (contextModifiers) {
      var _this2$props = _this2.props,
          ignoreContent = _this2$props.content,
          ignoreCursor = _this2$props.cursor,
          ignoreDisabled = _this2$props.disabled,
          modifiers = _this2$props.modifiers,
          ignoreOnClose = _this2$props.onClose,
          ignoreOnOpen = _this2$props.onOpen,
          ignoreTitle = _this2$props.title,
          rootProps = _objectWithoutPropertiesLoose(_this2$props, ["content", "cursor", "disabled", "modifiers", "onClose", "onOpen", "title"]);

      var isOpen = _this2.getControllableValue('isOpen');

      var contentProps = {
        modifiers: modifiers || contextModifiers
      };
      return (0, _core.jsx)(_reactPopper.Manager, null, (0, _core.jsx)(_styled.PopoverRoot, rootProps, _this2.renderTrigger(), isOpen && _this2.renderContent(contentProps), isOpen && (0, _core.jsx)(_EventListener.default, {
        listeners: [{
          target: 'document',
          event: 'click',
          handler: _this2.handleDocumentClick,
          options: true
        }, {
          target: 'document',
          event: 'keydown',
          handler: _this2.handleDocumentKeydown,
          options: true
        }]
      })));
    });
  };

  return Popover;
}(_react.Component);

exports.default = Popover;

_defineProperty(Popover, "displayName", 'Popover');

_defineProperty(Popover, "defaultProps", {
  focusTriggerOnClose: true,
  hasArrow: true,
  placement: _constants.PLACEMENT.bottom
});

Popover.propTypes = process.env.NODE_ENV !== "production" ? _propTypes.popoverPropTypes : {};