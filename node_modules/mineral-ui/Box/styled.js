"use strict";

exports.__esModule = true;
exports.BoxRoot = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _isPropValid = _interopRequireDefault(require("@emotion/is-prop-valid"));

var _styles = require("../styles");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var getMeasurement = function getMeasurement(value) {
  return typeof value === 'number' && value < 1 && value !== 0 ? value * 100 + "%" : value;
};

var getSpaceValue = function getSpaceValue(property, theme, value) {
  return theme["space_" + _constants.SPACING_TYPES[property] + "_" + value] || getMeasurement(value);
};

var getSpacingStyles = function getSpacingStyles(property, restProps, rtl) {
  // prettier-ignore
  var spacingPropKeys = ['', 'Horizontal', 'Vertical', 'Start', 'End', 'Bottom', 'Left', 'Right', 'Top'].map(function (suffix) {
    return "" + property + suffix;
  }).filter(function (key) {
    return restProps[key] !== undefined;
  });

  var setStyles = function setStyles(directions, key, styles) {
    directions.forEach(function (direction) {
      styles["" + property + direction] = restProps[key];
    });
  };

  return spacingPropKeys.reduce(function (acc, key) {
    if (key === property) {
      setStyles(['Bottom', 'Left', 'Right', 'Top'], key, acc);
    } else if (key.indexOf('Horizontal') !== -1) {
      setStyles(['Left', 'Right'], key, acc);
    } else if (key.indexOf('Vertical') !== -1) {
      setStyles(['Bottom', 'Top'], key, acc);
    } else if (key.indexOf('Start') !== -1) {
      setStyles(["" + (rtl ? 'Right' : 'Left')], key, acc);
    } else if (key.indexOf('End') !== -1) {
      setStyles(["" + (rtl ? 'Left' : 'Right')], key, acc);
    } else {
      acc[key] = restProps[key];
    }

    return acc;
  }, {});
};

var BoxRoot = (
/*#__PURE__*/
0, _styledBase.default)('div', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return ['height', 'width'].indexOf(prop) === -1 && (0, _isPropValid.default)(prop);
  },
  target: "elghiqq0"
})(function (_ref) {
  var breakpoints = _ref.breakpoints,
      height = _ref.height,
      inline = _ref.inline,
      theme = _ref.theme,
      width = _ref.width,
      restProps = _objectWithoutPropertiesLoose(_ref, ["breakpoints", "height", "inline", "theme", "width"]);

  var rtl = theme.direction === 'rtl';

  var mapValueToProperty = function mapValueToProperty(property, value) {
    var map = _objectSpread({
      display: function display(value) {
        return value ? 'inline-block' : undefined;
      },
      height: getMeasurement,
      width: getMeasurement
    }, ['margin', 'padding'].reduce(function (acc, property) {
      Object.keys(getSpacingStyles(property, restProps, rtl)).forEach(function (style) {
        acc[style] = function (value) {
          return getSpaceValue(property, theme, value);
        };
      });
      return acc;
    }, {}));

    return map[property](value);
  };

  return _objectSpread({}, (0, _styles.componentStyleReset)(theme), (0, _styles.getResponsiveStyles)({
    breakpoints: breakpoints,
    mapValueToProperty: mapValueToProperty,
    styles: _objectSpread({
      display: inline,
      height: height
    }, getSpacingStyles('margin', restProps, rtl), getSpacingStyles('padding', restProps, rtl), {
      width: width
    }),
    theme: theme
  }));
});
exports.BoxRoot = BoxRoot;