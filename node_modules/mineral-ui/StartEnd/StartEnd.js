"use strict";

exports.__esModule = true;
exports.default = StartEnd;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _Flex = _interopRequireWildcard(require("../Flex"));

var _constants = require("../Flex/constants");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function StartEnd(props) {
  var children = props.children,
      ignoreJustifyContent = props.justifyContent,
      priority = props.priority,
      ignoreWrap = props.wrap,
      restProps = _objectWithoutPropertiesLoose(props, ["children", "justifyContent", "priority", "wrap"]);

  var rootProps = _objectSpread({
    justifyContent: _constants.JUSTIFY_CONTENT.between
  }, restProps);

  var flexItems;

  if (_react.Children.count(children) === 2) {
    var growFactors = {
      start: [1, 0],
      end: [0, 1],
      both: [1, 1],
      none: [undefined, undefined]
    };
    flexItems = _react.Children.map(children, function (child, index) {
      return index ? (0, _core.jsx)(_Flex.FlexItem, {
        grow: growFactors[priority || 'none'][1]
      }, child) : (0, _core.jsx)(_Flex.FlexItem, {
        grow: growFactors[priority || 'none'][0]
      }, child);
    });
  } else {
    throw new Error('StartEnd must have exactly two children.');
  } // $FlowFixMe - Reverse directions unsupported here but are supported on Flex


  return (0, _core.jsx)(_Flex.default, rootProps, flexItems);
}

StartEnd.displayName = 'StartEnd';