"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireDefault(require("react"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _wrapDisplayName = _interopRequireDefault(require("recompose/wrapDisplayName"));

var _emotionTheming = require("emotion-theming");

var _ThemeProvider = _interopRequireDefault(require("./ThemeProvider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Usage: themed(component)(theme)
var themed = function themed(WrappedComponent) {
  return function (theme) {
    var Wrapper = function Wrapper(props, context) {
      var outTheme = typeof theme === 'function' ? theme(props, context) : theme;

      var ignore = props.theme,
          outProps = _objectWithoutPropertiesLoose(props, ["theme"]);

      return (0, _core.jsx)(_ThemeProvider.default, {
        theme: outTheme
      }, (0, _core.jsx)(WrappedComponent, outProps));
    }; // $FlowFixMe - `WrappedComponent.propTypes` missing in `React.AbstractComponentStatics`


    Wrapper.propTypes = process.env.NODE_ENV !== "production" ? WrappedComponent.propTypes : {};
    Wrapper.displayName = (0, _wrapDisplayName.default)(WrappedComponent, 'Themed');
    (0, _hoistNonReactStatics.default)(Wrapper, WrappedComponent);
    return (0, _emotionTheming.withTheme)(Wrapper);
  };
};

var _default = themed;
exports.default = _default;