"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash.range"));

var _IconChevronLeft = _interopRequireDefault(require("../Icon/IconChevronLeft"));

var _IconChevronRight = _interopRequireDefault(require("../Icon/IconChevronRight"));

var _Button = _interopRequireDefault(require("../Button"));

var _styled = require("./styled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var firstPage = function firstPage(current) {
  return current === 1;
};

var lastPage = function lastPage(current, total) {
  return current === total;
};

var isDisabled = function isDisabled(next, currentPage, totalPages) {
  return next ? lastPage(currentPage, totalPages) : firstPage(currentPage);
};

var getPageButtons = function getPageButtons(_ref) {
  var currentPage = _ref.currentPage,
      handleClick = _ref.handleClick,
      messages = _ref.messages,
      size = _ref.size,
      totalPages = _ref.totalPages,
      visibleRange = _ref.visibleRange;
  return (0, _lodash.default)(totalPages).map(function (_, index) {
    var page = index + 1;
    var evenOffset = visibleRange % 2 === 0 ? 1 : 0;
    var pagesBuffer;

    if (currentPage <= visibleRange || visibleRange === 1 && currentPage === 2) {
      pagesBuffer = visibleRange - currentPage + 3 - evenOffset;
    } else if (currentPage > totalPages - visibleRange || visibleRange === 1 && currentPage === totalPages - 1) {
      pagesBuffer = visibleRange - (totalPages - currentPage) + 2 - evenOffset;
    } else {
      pagesBuffer = Math.ceil(visibleRange / 2);
    }

    var firstPageInRange = page === currentPage - pagesBuffer && !firstPage(page);
    var lastPageInRange = page === currentPage + pagesBuffer && !lastPage(page, totalPages);
    var isPageOutOfRange = page < currentPage - pagesBuffer || page > currentPage + pagesBuffer;
    var isCurrentPage = page === currentPage;
    var isFirstPage = firstPage(page);
    var isLastPage = lastPage(page, totalPages);
    var pageView = null;

    if (firstPageInRange || lastPageInRange) {
      pageView = (0, _core.jsx)(_styled.PagesEllipsisButton, {
        key: page
      }, "\u2026");
    } else if (!isPageOutOfRange || isFirstPage || isLastPage) {
      pageView = (0, _core.jsx)(_Button.default, _extends({}, isCurrentPage ? {
        'aria-current': true
      } : undefined, isCurrentPage || isLastPage ? {
        'aria-label': messages.pageLabel(isCurrentPage, isLastPage, page)
      } : undefined, {
        minimal: true,
        primary: isCurrentPage,
        key: page,
        onClick: handleClick.bind(null, page),
        size: size,
        type: "button"
      }), page);
    }

    return pageView;
  }).filter(function (page) {
    return !!page;
  });
}; // eslint-disable-next-line react/display-name


var _ref3 =
/*#__PURE__*/
(0, _core.jsx)(_IconChevronRight.default, null);

var _ref4 =
/*#__PURE__*/
(0, _core.jsx)(_IconChevronLeft.default, null);

var IncrementButton = (0, _react.forwardRef)(function (_ref2, ref) {
  var _objectSpread2;

  var currentPage = _ref2.currentPage,
      direction = _ref2.direction,
      focusedNodeWhenDisabled = _ref2.focusedNodeWhenDisabled,
      handleIncrement = _ref2.handleIncrement,
      messages = _ref2.messages,
      size = _ref2.size,
      totalPages = _ref2.totalPages,
      restProps = _objectWithoutPropertiesLoose(_ref2, ["currentPage", "direction", "focusedNodeWhenDisabled", "handleIncrement", "messages", "size", "totalPages"]);

  var next = direction === 'next';
  var incrementIcon = next ? _ref3 : _ref4;
  var iconPosition = next ? 'iconEnd' : 'iconStart';

  var handleClick = function handleClick(next) {
    handleIncrement(next, function (nextPage) {
      isDisabled(next, nextPage, totalPages) && focusedNodeWhenDisabled && focusedNodeWhenDisabled.focus();
    });
  };

  var buttonProps = _objectSpread((_objectSpread2 = {
    children: messages[direction],
    disabled: isDisabled(next, currentPage, totalPages)
  }, _objectSpread2[iconPosition] = incrementIcon, _objectSpread2.minimal = true, _objectSpread2.onClick = handleClick.bind(null, next), _objectSpread2.ref = ref, _objectSpread2.size = size, _objectSpread2.type = 'button', _objectSpread2), restProps);

  return (0, _core.jsx)(_Button.default, buttonProps);
});
IncrementButton.displayName = 'IncrementButton';

var Pages =
/*#__PURE__*/
function (_PureComponent) {
  _inheritsLoose(Pages, _PureComponent);

  function Pages() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "previousButton", void 0);

    _defineProperty(_assertThisInitialized(_this), "nextButton", void 0);

    _defineProperty(_assertThisInitialized(_this), "setPreviousButtonRef", function (node) {
      _this.previousButton = node;
    });

    _defineProperty(_assertThisInitialized(_this), "setNextButtonRef", function (node) {
      _this.nextButton = node;
    });

    return _this;
  }

  var _proto = Pages.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        size = _this$props.size,
        showPageNumbers = _this$props.showPageNumbers,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["size", "showPageNumbers"]);

    return (0, _core.jsx)(_styled.PagesRoot, restProps, (0, _core.jsx)(IncrementButton, _extends({
      direction: "previous",
      focusedNodeWhenDisabled: this.nextButton,
      ref: this.setPreviousButtonRef,
      size: size
    }, restProps)), showPageNumbers && getPageButtons(this.props), (0, _core.jsx)(IncrementButton, _extends({
      direction: "next",
      focusedNodeWhenDisabled: this.previousButton,
      ref: this.setNextButtonRef,
      size: size
    }, restProps)));
  };

  return Pages;
}(_react.PureComponent);

exports.default = Pages;

_defineProperty(Pages, "displayName", 'Pages');