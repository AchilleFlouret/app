"use strict";

exports.__esModule = true;
exports.default = exports.Pagination = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _emotionTheming = require("emotion-theming");

var _Flex = require("../Flex");

var _Pages = _interopRequireDefault(require("./Pages"));

var _PageJumper = _interopRequireDefault(require("./PageJumper"));

var _PageSizer = _interopRequireDefault(require("./PageSizer"));

var _styled = require("./styled");

var _themes = require("./themes");

var _constants = require("./constants");

var _propTypes = require("./propTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Pagination =
/*#__PURE__*/
function (_PureComponent) {
  _inheritsLoose(Pagination, _PureComponent);

  function Pagination() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "pageJumperInput", void 0);

    _defineProperty(_assertThisInitialized(_this), "setPageJumperRef", function (node) {
      _this.pageJumperInput = node;
    });

    _defineProperty(_assertThisInitialized(_this), "getTotalPages", function (pageSize) {
      return Math.ceil(_this.props.totalCount / pageSize);
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (index) {
      _this.handlePageChange(index);
    });

    _defineProperty(_assertThisInitialized(_this), "handleIncrement", function (incrementForward, callback) {
      var currentPage = _this.props.currentPage;
      var nextPage = incrementForward ? currentPage + 1 : currentPage - 1;

      _this.handlePageChange(nextPage);

      callback && callback(nextPage);
    });

    _defineProperty(_assertThisInitialized(_this), "handlePageChange", function (currentPage) {
      _this.props.onPageChange(currentPage);

      if (_this.props.showPageJumper && _this.pageJumperInput && parseInt(_this.pageJumperInput.value) !== currentPage) {
        _this.pageJumperInput.value = '';
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handlePageSizeChange", function (pageSize) {
      var _this$props = _this.props,
          onPageSizeChange = _this$props.onPageSizeChange,
          currentPage = _this$props.currentPage;
      onPageSizeChange && onPageSizeChange(pageSize);

      var totalPages = _this.getTotalPages(pageSize);

      if (currentPage > totalPages) {
        _this.handlePageChange(totalPages);
      }
    });

    return _this;
  }

  var _proto = Pagination.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        currentPage = _this$props2.currentPage,
        propMessages = _this$props2.messages,
        ignoreOnPageChange = _this$props2.onPageChange,
        ignoreOnPageSizeChange = _this$props2.onPageSizeChange,
        pageSize = _this$props2.pageSize,
        pageSizes = _this$props2.pageSizes,
        showPageJumper = _this$props2.showPageJumper,
        showPageSizer = _this$props2.showPageSizer,
        size = _this$props2.size,
        baseTheme = _this$props2.theme,
        totalCount = _this$props2.totalCount,
        restProps = _objectWithoutPropertiesLoose(_this$props2, ["currentPage", "messages", "onPageChange", "onPageSizeChange", "pageSize", "pageSizes", "showPageJumper", "showPageSizer", "size", "theme", "totalCount"]);

    var theme = (0, _themes.paginationTheme)(baseTheme);

    var messages = _objectSpread({}, Pagination.defaultProps.messages, propMessages);

    var rootProps = _objectSpread({
      'aria-label': messages.label,
      gutterWidth: theme.Pagination_gutterWidth
    }, restProps);

    var totalPages = this.getTotalPages(pageSize);

    var pagesProps = _objectSpread({
      currentPage: currentPage,
      handleClick: this.handleClick,
      handleIncrement: this.handleIncrement,
      messages: messages.pages,
      size: size,
      totalPages: totalPages
    }, restProps);

    var showPageSizerOrJumper = showPageSizer || showPageJumper;
    var pageJumperProps;

    if (showPageJumper) {
      pageJumperProps = {
        currentPage: currentPage,
        inputRef: this.setPageJumperRef,
        key: 'Page Jumper',
        messages: messages.pageJumper,
        onPageChange: this.handlePageChange,
        size: size,
        totalPages: totalPages,
        width: theme.PaginationPageJumper_width
      };
    }

    var pageSizerProps;

    if (showPageSizer) {
      pageSizerProps = {
        currentPage: currentPage,
        key: 'Page Sizer',
        messages: _objectSpread({
          category: messages.category
        }, messages.pageSizer),
        onPageSizeChange: this.handlePageSizeChange,
        pageSize: pageSize,
        pageSizes: pageSizes,
        size: size,
        totalCount: totalCount,
        totalPages: totalPages
      };
    }

    return (0, _core.jsx)(_styled.PaginationRoot, rootProps, showPageSizerOrJumper && (0, _core.jsx)(_Flex.FlexItem, {
      flex: true,
      grow: 1
    }, showPageSizer && (0, _core.jsx)(_Flex.FlexItem, null, (0, _core.jsx)(_PageSizer.default, pageSizerProps)), showPageJumper && (0, _core.jsx)(_Flex.FlexItem, {
      marginStart: "auto"
    }, (0, _core.jsx)(_PageJumper.default, pageJumperProps))), (0, _core.jsx)(_Flex.FlexItem, null, (0, _core.jsx)(_Pages.default, pagesProps)));
  };

  return Pagination;
}(_react.PureComponent);

exports.Pagination = Pagination;

_defineProperty(Pagination, "displayName", 'Pagination');

_defineProperty(Pagination, "defaultProps", {
  messages: {
    category: 'rows',
    label: 'Pagination',
    pages: {
      next: 'Next',
      pageLabel: function pageLabel(isCurrentPage, isLastPage, page) {
        return (isCurrentPage ? 'Current page, ' : '') + (isLastPage ? 'Last page, ' : '') + page;
      },
      previous: 'Previous'
    },
    pageJumper: {
      label: 'Jump to page',
      placeholder: 'Page #'
    },
    pageSizer: {
      status: function status(category, first, last, total) {
        return first + "\u2013" + last + " of " + total + " " + category;
      },
      itemText: function itemText(pageSize) {
        return pageSize + " per page";
      }
    }
  },
  pageSizes: [10, 20, 50],
  showPageNumbers: true,
  size: _constants.SIZE.medium,
  visibleRange: 5
});

Pagination.propTypes = process.env.NODE_ENV !== "production" ? _propTypes.paginationPropTypes : {};

var _default = (0, _emotionTheming.withTheme)(Pagination);

exports.default = _default;