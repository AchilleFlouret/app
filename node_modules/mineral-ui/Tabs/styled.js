"use strict";

exports.__esModule = true;
exports.TabPanelRoot = exports.TabPanelOverflowContainer = exports.TabListIncrementButton = exports.TabListRoot = exports.TabListList = exports.TabListInner = exports.TabAnchor = exports.TabsRoot = void 0;

var _core = require("@emotion/core");

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _isPropValid = _interopRequireDefault(require("@emotion/is-prop-valid"));

var _withProps = _interopRequireDefault(require("recompose/withProps"));

var _styles = require("../styles");

var _themes = require("../themes");

var _cssSelectors = require("../utils/cssSelectors");

var _emotion = require("../utils/emotion");

var _Button = _interopRequireDefault(require("../Button"));

var _OverflowContainer = _interopRequireWildcard(require("../OverflowContainer"));

var _themes2 = require("./themes");

var _styled2;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TabsRoot = (
/*#__PURE__*/
0, _styledBase.default)('div', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'height' && (0, _isPropValid.default)(prop);
  },
  target: "e11x42940"
})(function (_ref) {
  var height = _ref.height,
      position = _ref.position,
      theme = _ref.theme;
  var flexDirection = {
    bottom: 'column-reverse',
    end: 'row-reverse',
    start: 'row',
    top: 'column'
  };
  return _objectSpread({}, (0, _styles.componentStyleReset)(theme), {
    display: 'flex',
    flexDirection: flexDirection[position],
    height: height
  });
});
exports.TabsRoot = TabsRoot;
var TabThemedButton = (0, _themes.themed)(_Button.default)(function (_ref2) {
  var baseTheme = _ref2.theme;
  var theme = (0, _themes2.tabTheme)(baseTheme);
  return {
    Button_backgroundColor_minimal_active: null,
    Button_backgroundColor_minimal_hover: null,
    Button_borderRadius: null,
    Button_borderWidth: 0,
    Button_boxShadow_focus: null,
    Button_color_minimal: theme.Tab_color
  };
});
var TabAnchor = (0, _withProps.default)({
  as: 'a',
  fullWidth: true,
  role: 'tab',
  size: 'medium'
})((
/*#__PURE__*/
0, _styledBase.default)(TabThemedButton, {
  shouldForwardProp: function shouldForwardProp(prop) {
    return ['selected', 'title'].indexOf(prop) === -1;
  },
  target: "e11x42941"
})(function (_ref3) {
  var disabled = _ref3.disabled,
      maxWidth = _ref3.maxWidth,
      _ref3$position = _ref3.position,
      position = _ref3$position === void 0 ? 'top' : _ref3$position,
      selected = _ref3.selected,
      baseTheme = _ref3.theme;
  var theme = (0, _themes2.tabTheme)(baseTheme);
  var rtl = theme.direction === 'rtl';
  var justifyContent = {
    end: 'flex-start',
    start: 'flex-end',
    top: undefined
  };

  var boxShadow = function boxShadow(borderWidth) {
    return {
      top: "0 " + -borderWidth + "px",
      start: rtl ? borderWidth + "px 0" : -borderWidth + "px 0",
      bottom: "0 " + borderWidth + "px",
      end: rtl ? -borderWidth + "px 0" : borderWidth + "px 0"
    };
  };

  return _objectSpread({
    maxWidth: maxWidth,
    '&:hover': {
      color: !disabled && theme.Tab_color_selectedHover
    },
    // Truncate
    '&:active > span > span > span > span > span:focus': {
      outline: 'none'
    }
  }, selected && {
    backgroundColor: theme.Tab_backgroundColor_selected,
    color: theme.Tab_color_selected,
    // prettier-ignore
    boxShadow: "inset " + boxShadow(theme.TabIndicator_thickness)[position] + " " + theme.Tab_borderColor_focus,
    '&:focus, &:active': {
      color: theme.Tab_color_selected,
      outline: theme.Tab_borderWidth_focus + "px solid " + theme.Tab_borderColor_focus,
      outlineOffset: "-" + theme.Tab_borderWidth_focus + "px"
    }
  }, {
    // Button's Inner
    '& > span': {
      justifyContent: justifyContent[position],
      // Content
      '& > span': {
        // Tooltip & TooltipTrigger & Truncate
        '& > span, & > span > span, & > span > span > span': {
          display: 'block'
        }
      }
    }
  });
}));
exports.TabAnchor = TabAnchor;
var TabListThemedButton = (0, _themes.themed)(_Button.default)(function (_ref4) {
  var baseTheme = _ref4.theme;
  var theme = (0, _themes2.tabListTheme)(baseTheme);
  return {
    Button_backgroundColor_minimal_active: null,
    Button_backgroundColor_minimal_hover: null,
    Button_borderRadius: 0,
    Button_borderWidth: 0,
    Button_boxShadow_focus: null,
    Button_paddingIconOnly_medium: 0,
    ButtonIcon_color: theme.TabListArrow_color,
    Icon_size_medium: (0, _styles.pxToEm)(20)
  };
});
var TabListThemedOverflowContainerWithShadows = (0, _themes.themed)(_OverflowContainer.OverflowContainerWithShadows)(function (_ref5) {
  var baseTheme = _ref5.theme;
  var theme = (0, _themes2.tabListTheme)(baseTheme); // prettier-ignore

  return {
    OverflowContainerWithShadows_boxShadowBottom: "inset 0 -24px 22px -14px " + theme.TabListOverflowContainer_boxShadowColor,
    OverflowContainerWithShadows_boxShadowLeft: "inset 24px 0 22px -14px " + theme.TabListOverflowContainer_boxShadowColor,
    OverflowContainerWithShadows_boxShadowRight: "inset -24px 0 22px -14px " + theme.TabListOverflowContainer_boxShadowColor,
    OverflowContainerWithShadows_boxShadowTop: "inset 0 24px 22px -14px " + theme.TabListOverflowContainer_boxShadowColor
  };
});
var TabListArrowButton = (0, _withProps.default)({
  type: 'button'
})((
/*#__PURE__*/
0, _styledBase.default)(TabListThemedButton, {
  target: "e11x42942"
})(function (_ref6) {
  var baseTheme = _ref6.theme;
  var theme = (0, _themes2.tabListTheme)(baseTheme);
  return {
    flexShrink: 0,
    '&:hover': {
      '& [role="img"]': {
        color: theme.TabListArrow_color_hover
      }
    },
    '& > span': {
      height: '100%'
    }
  };
}));
var TabListInner = (0, _withProps.default)({
  hideScrollbars: true,
  // We handle our own "scroll with the keyboard" interaction in Tabs, so
  // null tabIndex is to prevent an extraneous tab stop
  tabIndex: null
})((
/*#__PURE__*/
0, _styledBase.default)(TabListThemedOverflowContainerWithShadows, {
  target: "e11x42943"
})(function (_ref7) {
  var _before;

  var position = _ref7.position,
      baseTheme = _ref7.theme,
      vertical = _ref7.vertical;

  var theme = _objectSpread({}, (0, _themes2.tabListTheme)(baseTheme), (0, _themes2.tabPanelTheme)(baseTheme));

  var rtl = theme.direction === 'rtl';
  var edge = {
    bottom: 'top',
    end: rtl ? 'right' : 'left',
    start: rtl ? 'left' : 'right',
    top: 'bottom'
  };
  var edgeProperty = edge[position];
  return _objectSpread({
    display: 'flex'
  }, vertical ? {
    minHeight: '0%'
  } : {
    minWidth: '0%'
  }, theme.TabList_border ? {
    // OverflowContainerWithShadows > Shadows
    '&::before': (_before = {}, _before[edgeProperty] = theme.TabList_border.split('px')[0] + "px", _before)
  } : undefined);
}));
exports.TabListInner = TabListInner;
var TabListList = (
/*#__PURE__*/
0, _styledBase.default)('ul', {
  target: "e11x42944"
})(function (_ref8) {
  var _notLastChild;

  var align = _ref8.align,
      count = _ref8.count,
      baseTheme = _ref8.theme,
      vertical = _ref8.vertical;
  var theme = (0, _themes2.tabListTheme)(baseTheme);
  var rtl = theme.direction === 'rtl';
  var childMarginProperty = vertical ? 'marginBottom' : rtl ? 'marginLeft' : 'marginRight';
  return {
    display: 'flex',
    flexDirection: vertical ? 'column' : undefined,
    flexGrow: 1,
    justifyContent: align ? align === 'center' ? align : "flex-" + align : undefined,
    listStyle: 'none',
    margin: 0,
    padding: 0,
    whiteSpace: 'nowrap',
    // Tab
    '& > *': _objectSpread({}, align === 'justify' ? vertical ? {
      display: 'flex',
      flexGrow: 1,
      // Anchor in Tab
      '& > *': {
        display: 'flex',
        height: 'auto'
      }
    } : {
      // prettier-ignore
      width: "calc(" + 1 / count * 100 + "% - " + theme.TabList_gutterHorizontal + ")"
    } : undefined, {
      '&:not(:last-child)': (_notLastChild = {}, _notLastChild[childMarginProperty] = vertical ? theme.TabList_gutterVertical : theme.TabList_gutterHorizontal, _notLastChild)
    })
  };
});
exports.TabListList = TabListList;
var TabListRoot = (
/*#__PURE__*/
0, _styledBase.default)('div', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'height' && (0, _isPropValid.default)(prop);
  },
  target: "e11x42945"
})(function (_ref9) {
  var _ref10;

  var height = _ref9.height,
      vertical = _ref9.vertical;
  return _objectSpread({
    display: 'flex',
    flex: '0 0 auto',
    flexDirection: vertical ? 'column' : undefined,
    position: 'relative'
  }, vertical && height ? (_ref10 = {}, _ref10[_cssSelectors.ie10Plus] = {
    height: height
  }, _ref10) : undefined);
}); // eslint-disable-next-line react/display-name

exports.TabListRoot = TabListRoot;

var TabListIncrementButton = function TabListIncrementButton(_ref11) {
  var icon = _ref11.icon,
      restProps = _objectWithoutPropertiesLoose(_ref11, ["icon"]);

  return (0, _core.jsx)(TabListArrowButton, _extends({
    "aria-hidden": true,
    iconStart: icon,
    minimal: true,
    size: "medium",
    tabIndex: -1
  }, restProps));
};

exports.TabListIncrementButton = TabListIncrementButton;
var TabPanelOverflowContainer = (0, _withProps.default)({
  scrollY: true,
  // We always want the panel content to be focusable, for ease of keyboard users
  tabIndex: 0
})((
/*#__PURE__*/
0, _styledBase.default)(_OverflowContainer.default, {
  target: "e11x42946"
})((_styled2 = {
  flex: '1 1 auto'
}, _styled2['& > :first-child' + _emotion.ignoreSsrWarning] = {
  marginTop: 0
}, _styled2['& > :last-child'] = {
  marginBottom: 0
}, _styled2)));
exports.TabPanelOverflowContainer = TabPanelOverflowContainer;
var TabPanelRoot = (0, _withProps.default)({
  role: 'tabpanel'
})((
/*#__PURE__*/
0, _styledBase.default)('div', {
  target: "e11x42947"
})(function (_ref12) {
  var _ref13;

  var position = _ref12.position,
      baseTheme = _ref12.theme;
  var theme = (0, _themes2.tabPanelTheme)(baseTheme);
  var rtl = theme.direction === 'rtl';
  var orientation = {
    bottom: 'Bottom',
    end: rtl ? 'Left' : 'Right',
    start: rtl ? 'Right' : 'Left',
    top: 'Top'
  };
  var borderProperty = "border" + orientation[position];
  var marginProperty = "margin" + orientation[position];
  var paddingProperty = "padding" + orientation[position];
  return _ref13 = {}, _ref13[borderProperty] = theme.TabList_border, _ref13.display = 'flex', _ref13.flex = '1 1 auto', _ref13[marginProperty] = theme.TabList_border && -theme.TabList_border.split('px')[0], _ref13.minHeight = '0%', _ref13[paddingProperty] = theme.TabPanel_gap, _ref13;
}));
exports.TabPanelRoot = TabPanelRoot;