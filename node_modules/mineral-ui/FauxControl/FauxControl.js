"use strict";

exports.__esModule = true;
exports.default = FauxControl;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _IconDanger = _interopRequireDefault(require("../Icon/IconDanger"));

var _IconSuccess = _interopRequireDefault(require("../Icon/IconSuccess"));

var _IconWarning = _interopRequireDefault(require("../Icon/IconWarning"));

var _styled = require("./styled");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var variantIcons = {
  danger: (0, _core.jsx)(_IconDanger.default, null),
  success: (0, _core.jsx)(_IconSuccess.default, null),
  warning: (0, _core.jsx)(_IconWarning.default, null)
};

var getIcons = function getIcons(_ref) {
  var disabled = _ref.disabled,
      iconStart = _ref.iconStart,
      iconEnd = _ref.iconEnd,
      readOnly = _ref.readOnly,
      size = _ref.size,
      variant = _ref.variant,
      variantIcons = _ref.variantIcons;

  if (disabled || readOnly) {
    return [];
  }

  var iconSize = size || _constants.SIZE.large;
  var startIcon = iconStart && (0, _react.cloneElement)(iconStart, {
    size: _constants.ICON_SIZE[iconSize],
    key: 'iconStart'
  });
  var endIconSource = iconEnd !== null && variant ? variantIcons[variant] : iconEnd ? iconEnd : null;
  var endIcon = endIconSource && (0, _react.cloneElement)(endIconSource, {
    size: _constants.ICON_SIZE[iconSize],
    key: 'iconEnd'
  });
  return [startIcon, endIcon];
};

function FauxControl(_ref2) {
  var afterItems = _ref2.afterItems,
      beforeItems = _ref2.beforeItems,
      children = _ref2.children,
      control = _ref2.control,
      controlPropsIn = _ref2.controlProps,
      disabled = _ref2.disabled,
      fauxControlRef = _ref2.fauxControlRef,
      iconEnd = _ref2.iconEnd,
      iconStart = _ref2.iconStart,
      prefixIn = _ref2.prefix,
      size = _ref2.size,
      readOnly = _ref2.readOnly,
      suffixIn = _ref2.suffix,
      variant = _ref2.variant,
      restProps = _objectWithoutPropertiesLoose(_ref2, ["afterItems", "beforeItems", "children", "control", "controlProps", "disabled", "fauxControlRef", "iconEnd", "iconStart", "prefix", "size", "readOnly", "suffix", "variant"]);

  var rootProps = _objectSpread({
    disabled: disabled,
    ref: fauxControlRef,
    variant: variant
  }, restProps);

  var _getIcons = getIcons({
    disabled: disabled,
    iconStart: iconStart,
    iconEnd: iconEnd,
    readOnly: readOnly,
    size: size,
    variant: variant,
    variantIcons: variantIcons
  }),
      startIcon = _getIcons[0],
      endIcon = _getIcons[1];

  var prefixAndSuffixProps = {
    iconEnd: iconEnd,
    iconStart: iconStart,
    size: size,
    variant: variant
  };
  var prefix = prefixIn ? (0, _core.jsx)(_styled.Prefix, _extends({}, prefixAndSuffixProps, {
    key: "prefix"
  }), prefixIn) : null;
  var suffix = suffixIn ? (0, _core.jsx)(_styled.Suffix, _extends({}, prefixAndSuffixProps, {
    key: "suffix"
  }), suffixIn) : null;

  var controlProps = _objectSpread({
    as: control,
    controlPropsIn: controlPropsIn
  }, controlPropsIn, {
    children: children,
    disabled: disabled,
    iconEnd: iconEnd,
    iconStart: iconStart,
    prefix: prefixIn,
    ref: controlPropsIn && controlPropsIn.controlRef,
    readOnly: readOnly
  }, controlPropsIn && controlPropsIn.htmlSize ? {
    controlSize: size,
    size: controlPropsIn.htmlSize
  } : {
    size: size
  }, {
    suffix: suffixIn,
    variant: variant
  });

  var underlayProps = {
    disabled: disabled,
    readOnly: readOnly,
    variant: variant
  };
  return (0, _core.jsx)(_styled.FauxControlRoot, rootProps, beforeItems, startIcon, prefix, (0, _core.jsx)(_styled.Control, _extends({}, controlProps, {
    key: "control"
  })), suffix, endIcon, afterItems, (0, _core.jsx)(_styled.Underlay, underlayProps));
}

FauxControl.displayName = 'FauxControl';