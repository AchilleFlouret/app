"use strict";

exports.__esModule = true;
exports.Button = exports.Inner = exports.Content = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _isPropValid = _interopRequireDefault(require("@emotion/is-prop-valid"));

var _styles = require("../styles");

var _emotion = require("../utils/emotion");

var _constants = require("./constants");

var _themes = require("./themes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var chooseColor = function chooseColor(_ref, theme) {
  var disabled = _ref.disabled,
      primary = _ref.primary,
      minimal = _ref.minimal;

  if (disabled) {
    return theme.color_disabled;
  } else if (primary) {
    return theme.Button_color_primary;
  } else if (minimal) {
    return theme.Button_color_minimal;
  } else {
    return theme.Button_color;
  }
};

var Content = (
/*#__PURE__*/
0, _styledBase.default)('span', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'size' && (0, _isPropValid.default)(prop);
  },
  target: "e70ypka0"
})(function (_ref2) {
  var size = _ref2.size,
      baseTheme = _ref2.theme;
  var theme = (0, _themes.buttonTheme)(baseTheme);
  var rtl = theme.direction === 'rtl';
  var firstChildPaddingProperty = rtl ? 'paddingRight' : 'paddingLeft';
  var lastChildPaddingProperty = rtl ? 'paddingLeft' : 'paddingRight';
  var paddings;
  var fontSize = size === _constants.SIZE.small ? theme.ButtonContent_fontSize_small : theme.ButtonContent_fontSize;

  if (size === undefined || size === _constants.SIZE.large || size === _constants.SIZE.jumbo) {
    var _ref3, _lastChild, _paddings;

    var padding = (0, _styles.getNormalizedValue)(theme.Button_paddingHorizontal, fontSize);
    paddings = (_paddings = {}, _paddings['&:first-child' + _emotion.ignoreSsrWarning] = (_ref3 = {}, _ref3[firstChildPaddingProperty] = padding, _ref3), _paddings['&:last-child'] = (_lastChild = {}, _lastChild[lastChildPaddingProperty] = padding, _lastChild), _paddings);
  }

  return _objectSpread({}, {
    display: "inline-block",
    maxWidth: "100%",
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    wordWrap: "normal"
  }, {
    display: 'block',
    fontSize: fontSize,
    lineHeight: (0, _styles.getNormalizedValue)(theme["Button_height_" + size], fontSize)
  }, paddings);
});
exports.Content = Content;
var Inner = (
/*#__PURE__*/
0, _styledBase.default)('span', {
  target: "e70ypka1"
})({
  name: "1xssqnp",
  styles: "align-items:center;display:inline-flex;justify-content:center;max-height:100%;pointer-events:none;width:100%;"
});
exports.Inner = Inner;
var Button = (
/*#__PURE__*/
0, _styledBase.default)('button', {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'size' && (0, _isPropValid.default)(prop);
  },
  target: "e70ypka2"
})(function (_ref4) {
  var _ref5, _roleImgLast, _objectSpread2;

  var circular = _ref4.circular,
      disabled = _ref4.disabled,
      fullWidth = _ref4.fullWidth,
      minimal = _ref4.minimal,
      primary = _ref4.primary,
      size = _ref4.size,
      text = _ref4.text,
      baseTheme = _ref4.theme,
      variant = _ref4.variant;
  var theme = (0, _themes.buttonTheme)(baseTheme);
  var rtl = theme.direction === 'rtl';
  var firstChildMarginProperty = rtl ? 'marginLeft' : 'marginRight';
  var lastChildMarginProperty = rtl ? 'marginRight' : 'marginLeft';

  if (variant) {
    // prettier-ignore
    theme = _objectSpread({}, theme, {
      Button_backgroundColor_primary: theme["backgroundColor_" + variant + "Primary"],
      Button_backgroundColor_primary_active: theme["backgroundColor_" + variant + "Primary_active"],
      Button_backgroundColor_primary_focus: theme["backgroundColor_" + variant + "Primary_focus"],
      Button_backgroundColor_primary_hover: theme["backgroundColor_" + variant + "Primary_hover"],
      Button_borderColor_active: theme["borderColor_" + variant + "_active"],
      Button_borderColor_focus: theme["borderColor_" + variant + "_focus"],
      Button_borderColor_hover: theme["borderColor_" + variant + "_hover"],
      Button_boxShadow_focus: "0 0 0 1px " + theme.boxShadow_focusInner + ", 0 0 0 2px " + theme["borderColor_" + variant + "_focus"],
      Button_color: theme["color_" + variant],
      Button_color_primary: theme["color_" + variant + "Primary"],
      Button_color_minimal: theme["color_" + variant],
      ButtonIcon_color: theme["icon_color_" + variant]
    });
  }

  var color = chooseColor({
    disabled: disabled,
    primary: primary,
    minimal: minimal
  }, theme);
  return _objectSpread({}, (0, _styles.componentStyleReset)(baseTheme), (_objectSpread2 = {
    backgroundColor: function () {
      if (disabled && !minimal) {
        return theme.backgroundColor_disabled;
      } else if (primary) {
        return theme.Button_backgroundColor_primary;
      } else if (minimal) {
        return 'transparent';
      } else {
        return theme.Button_backgroundColor;
      }
    }(),
    borderColor: disabled || primary || minimal ? 'transparent' : theme.Button_borderColor,
    borderRadius: circular ? parseFloat(theme["Button_height_" + size]) / 2 + "em" : theme.Button_borderRadius,
    borderStyle: 'solid',
    borderWidth: theme.Button_borderWidth + "px",
    color: color,
    cursor: disabled ? 'default' : 'pointer',
    display: 'inline-block',
    fontWeight: theme.Button_fontWeight,
    height: theme["Button_height_" + size],
    margin: 0,
    // if the user puts in a small icon in a large button
    // we want to force the button to be round/square
    // (really just pertinent on icon-only buttons)
    minWidth: theme["Button_height_" + size],
    padding: text === undefined ? theme["Button_paddingIconOnly_" + size] : "0 " + theme.Button_paddingHorizontal,
    textDecoration: 'none',
    verticalAlign: 'middle',
    width: fullWidth && '100%',
    '&:focus': !disabled && {
      backgroundColor: function () {
        if (primary) {
          return theme.Button_backgroundColor_primary_focus;
        } else if (minimal) {
          return theme.Button_backgroundColor_minimal_focus;
        } else {
          return theme.Button_backgroundColor_focus;
        }
      }(),
      borderColor: minimal ? theme.Button_borderColor_focus : undefined,
      boxShadow: minimal ? undefined : theme.Button_boxShadow_focus,
      color: color,
      textDecoration: 'none'
    },
    '&:hover': {
      backgroundColor: function () {
        if (!disabled) {
          if (primary) {
            return theme.Button_backgroundColor_primary_hover;
          } else if (minimal) {
            return theme.Button_backgroundColor_minimal_hover;
          } else {
            return theme.Button_backgroundColor_hover;
          }
        }
      }(),
      borderColor: disabled || minimal || primary ? undefined : theme.Button_borderColor_hover,
      color: color,
      textDecoration: 'none'
    },
    '&:focus:active, &:focus:hover': {
      borderColor: function () {
        if (primary) {
          return 'transparent';
        } else if (minimal) {
          return theme.Button_borderColor_focus;
        } else {
          return theme.Button_borderColor;
        }
      }()
    },
    // `:active` must be last, to follow LVHFA order:
    // https://developer.mozilla.org/en-US/docs/Web/CSS/:active
    '&:active': {
      backgroundColor: function () {
        if (!disabled) {
          if (primary) {
            return theme.Button_backgroundColor_primary_active;
          } else if (minimal) {
            return theme.Button_backgroundColor_minimal_active;
          } else {
            return theme.Button_backgroundColor_active;
          }
        }
      }(),
      borderColor: !minimal && !disabled ? theme.Button_borderColor_active : undefined,
      color: color
    },
    '&::-moz-focus-inner': {
      border: 0
    },
    '& [role="img"]': {
      boxSizing: 'content-box',
      color: disabled || primary ? null : theme.ButtonIcon_color,
      display: 'block',
      flexShrink: 0
    }
  }, _objectSpread2['& [role="img"]:first-child' + _emotion.ignoreSsrWarning] = (_ref5 = {}, _ref5[firstChildMarginProperty] = theme.ButtonIcon_margin, _ref5), _objectSpread2['& [role="img"]:last-child'] = (_roleImgLast = {}, _roleImgLast[lastChildMarginProperty] = theme.ButtonIcon_margin, _roleImgLast), _objectSpread2['& [role="img"]:only-child'] = {
    margin: 0
  }, _objectSpread2));
});
exports.Button = Button;