"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _exenv = require("exenv");

var _fontfaceobserver = _interopRequireDefault(require("fontfaceobserver"));

var _styled = require("./styled");

var _constants = require("./constants");

var _propTypes = require("./propTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TextArea =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(TextArea, _Component);

  function TextArea() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "textArea", void 0);

    _defineProperty(_assertThisInitialized(_this), "handleInput", function (event) {
      var _this$props = _this.props,
          autoSize = _this$props.autoSize,
          onInput = _this$props.onInput;
      autoSize && _this.autoSize();
      onInput && onInput(event);
    });

    _defineProperty(_assertThisInitialized(_this), "autoSize", function () {
      var autoSize = _this.props.autoSize;

      if (!autoSize || !_this.textArea || !_exenv.canUseDOM) {
        return;
      }

      var _window$getComputedSt = window.getComputedStyle(_this.textArea),
          maxHeight = _window$getComputedSt.maxHeight,
          minHeight = _window$getComputedSt.minHeight;
      /** $FlowFixMe */


      _this.textArea.style.height = 'auto';
      /** $FlowFixMe */

      _this.textArea.style.overflowY = 'hidden';
      /** $FlowFixMe */

      _this.textArea.style.height = Math.max(parseFloat(minHeight), Math.min(
      /** $FlowFixMe */
      parseFloat(_this.textArea.scrollHeight), parseFloat(maxHeight) || window.Infinity)) + "px";
    });

    _defineProperty(_assertThisInitialized(_this), "removeAutoSize", function () {
      if (_this.textArea) {
        _this.textArea.style.height = '';
        _this.textArea.style.overflowY = '';
      }
    });

    return _this;
  }

  var _proto = TextArea.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.autoSize(); // Auto sized height can sometimes be slightly incorrect before web font has
    // loaded due differences in font metrics.  Here we call it again after the
    // fontFamily has loaded.

    if (this.textArea && _exenv.canUseDOM) {
      var fontFamily = window.getComputedStyle(this.textArea).fontFamily.replace(/["']/g, '').split(',')[0];
      var font = new _fontfaceobserver.default(fontFamily);
      font.load().then(this.autoSize, function () {});
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props2 = this.props,
        autoSize = _this$props2.autoSize,
        rows = _this$props2.rows,
        size = _this$props2.size,
        value = _this$props2.value;
    var prevAutoSize = prevProps.autoSize,
        prevRows = prevProps.rows,
        prevSize = prevProps.size,
        prevValue = prevProps.value;

    if (autoSize && (!prevAutoSize || value !== prevValue || rows !== prevRows || size !== prevSize)) {
      this.autoSize();
    }

    if (!autoSize && prevAutoSize) {
      this.removeAutoSize();
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props3 = this.props,
        autoSize = _this$props3.autoSize,
        className = _this$props3.className,
        disabled = _this$props3.disabled,
        inputRef = _this$props3.inputRef,
        invalid = _this$props3.invalid,
        readOnly = _this$props3.readOnly,
        required = _this$props3.required,
        _this$props3$resizeab = _this$props3.resizeable,
        resizeable = _this$props3$resizeab === void 0 ? true : _this$props3$resizeab,
        otherRootProps = _this$props3.rootProps,
        rows = _this$props3.rows,
        size = _this$props3.size,
        variant = _this$props3.variant,
        restProps = _objectWithoutPropertiesLoose(_this$props3, ["autoSize", "className", "disabled", "inputRef", "invalid", "readOnly", "required", "resizeable", "rootProps", "rows", "size", "variant"]);

    var textAreaProps = _objectSpread({
      'aria-invalid': invalid,
      'aria-required': required,
      autoSize: autoSize,
      controlRef: function controlRef(ref) {
        _this2.textArea = ref;

        if (inputRef) {
          inputRef(ref);
        }
      },
      disabled: disabled,
      onInput: this.handleInput,
      readOnly: readOnly,
      required: required,
      resizeable: autoSize ? false : resizeable,
      rows: rows || size && _constants.SIZE_TO_ROWS[size] || undefined,
      size: size
    }, restProps);

    var rootProps = _objectSpread({
      className: className,
      control: _styled.Input,
      controlProps: textAreaProps,
      disabled: disabled,
      iconEnd: null,
      // Opt out of the variant icon
      readOnly: readOnly,
      size: size,
      variant: variant
    }, otherRootProps);

    return (0, _core.jsx)(_styled.TextAreaRoot, rootProps);
  };

  return TextArea;
}(_react.Component);

exports.default = TextArea;

_defineProperty(TextArea, "displayName", 'TextArea');

_defineProperty(TextArea, "defaultProps", {
  size: _constants.SIZE.large
});

TextArea.propTypes = process.env.NODE_ENV !== "production" ? _propTypes.textAreaPropTypes : {};