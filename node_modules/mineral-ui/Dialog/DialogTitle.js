"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireDefault(require("react"));

var _emotionTheming = require("emotion-theming");

var _IconDanger = _interopRequireDefault(require("../Icon/IconDanger"));

var _IconSuccess = _interopRequireDefault(require("../Icon/IconSuccess"));

var _IconWarning = _interopRequireDefault(require("../Icon/IconWarning"));

var _Text = require("../Text");

var _constants = require("./constants");

var _styled = require("./styled");

var _themes = require("./themes");

var _propTypes = require("./propTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var variantIcons = {
  danger: _IconDanger.default,
  success: _IconSuccess.default,
  warning: _IconWarning.default
};

var DialogTitle = function DialogTitle(_ref) {
  var as = _ref.as,
      id = _ref.id,
      theme = _ref.theme,
      variant = _ref.variant,
      restProps = _objectWithoutPropertiesLoose(_ref, ["as", "id", "theme", "variant"]);

  var rootProps = _objectSpread({
    variant: variant
  }, restProps); // eslint-disable-next-line react/display-name


  var TitleContent = function TitleContent(props) {
    return (0, _core.jsx)(_styled.DialogTitleTitle, _extends({
      id: id
    }, props));
  };

  var title = (0, _Text.textWithThemeOverrides)(_objectSpread({
    as: as || 'h1',
    displayName: 'DialogTitle',
    textComponent: TitleContent,
    theme: theme
  }, restProps));

  var Icon = function Icon() {
    return null;
  };

  if (variant) {
    Icon = variantIcons[variant];
  }

  return (0, _core.jsx)(_styled.DialogTitleRoot, rootProps, variant && (0, _core.jsx)(Icon, {
    size: (0, _themes.dialogTitleTheme)(theme).DialogTitleIcon_size
  }), title);
};

var defaultProps = {
  appearance: _constants.APPEARANCE.h4
};
DialogTitle.displayName = 'DialogTitle';
DialogTitle.defaultProps = defaultProps;
DialogTitle.propTypes = process.env.NODE_ENV !== "production" ? _propTypes.dialogTitlePropTypes : {};

var _default = (0, _emotionTheming.withTheme)(DialogTitle);

exports.default = _default;