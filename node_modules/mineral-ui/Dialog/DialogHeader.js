"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@emotion/core");

var _react = _interopRequireWildcard(require("react"));

var _children = require("../utils/children");

var _styled = require("./styled");

var _DialogTitle = _interopRequireDefault(require("./DialogTitle"));

var _propTypes = require("./propTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DialogHeader = function DialogHeader(props) {
  var children = props.children,
      closeButton = props.closeButton,
      titleProps = props.titleProps,
      rootProps = _objectWithoutPropertiesLoose(props, ["children", "closeButton", "titleProps"]);

  var title = (0, _children.findByType)(children, _DialogTitle.default);

  if (title) {
    title = (0, _react.cloneElement)(title, _objectSpread({}, titleProps, title.props));
  }

  return (0, _core.jsx)(_styled.DialogHeaderRoot, rootProps, title || children, closeButton);
};

DialogHeader.displayName = 'DialogHeader';
DialogHeader.propTypes = process.env.NODE_ENV !== "production" ? _propTypes.dialogHeaderPropTypes : {};
var _default = DialogHeader;
exports.default = _default;