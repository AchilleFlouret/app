"use strict";

exports.__esModule = true;
exports.dialogTitleTheme = exports.dialogRowTheme = exports.dialogBodyTheme = exports.dialogActionsTheme = exports.dialogTheme = void 0;

var _styles = require("../styles");

var _themes = require("../themes");

var _themes2 = require("../OverflowContainer/themes");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var dialogTheme = function dialogTheme(baseTheme) {
  return _objectSpread({
    Dialog_transitionDuration: '250ms',
    Dialog_zIndex: baseTheme.zIndex_1600,
    DialogCloseButton_margin: baseTheme.space_inline_sm,
    DialogContent_backgroundColor: baseTheme.panel_backgroundColor,
    DialogContent_borderColor: baseTheme.panel_borderColor,
    DialogContent_borderRadius: baseTheme.borderRadius_1,
    DialogContent_boxShadow: baseTheme.boxShadow_5,
    DialogContent_maxHeight: '80vh',
    DialogContent_maxHeight_small: (0, _styles.pxToEm)(560),
    DialogContent_maxHeight_medium: (0, _styles.pxToEm)(560),
    DialogContent_maxHeight_large: (0, _styles.pxToEm)(720),
    DialogContent_maxWidth_small: (0, _styles.pxToEm)(400),
    DialogContent_maxWidth_medium: (0, _styles.pxToEm)(640),
    DialogContent_maxWidth_large: (0, _styles.pxToEm)(1200),
    DialogContent_minWidth: (0, _styles.pxToEm)(360),
    DialogContent_offsetVertical: baseTheme.space_stack_xxl,
    DialogContent_width_small: '35vw',
    DialogContent_width_medium: '50vw',
    DialogContent_width_large: '80vw',
    DialogOverlay_backgroundColor: 'rgba(0, 0, 0, 0.6)'
  }, dialogRowTheme(baseTheme), baseTheme);
};

exports.dialogTheme = dialogTheme;

var dialogActionsTheme = function dialogActionsTheme(baseTheme) {
  return _objectSpread({
    DialogActionsItem_margin: baseTheme.space_stack_sm
  }, baseTheme);
}; // $FlowFixMe - strict theme keys incompatible with mapComponentThemes


exports.dialogActionsTheme = dialogActionsTheme;

var dialogBodyTheme = function dialogBodyTheme(baseTheme) {
  return (0, _themes.mapComponentThemes)({
    name: 'OverflowContainerWithShadows',
    theme: (0, _themes2.overflowContainerWithShadowsTheme)(baseTheme)
  }, {
    name: 'DialogBody',
    theme: {}
  }, baseTheme);
};

exports.dialogBodyTheme = dialogBodyTheme;

var dialogRowTheme = function dialogRowTheme(baseTheme) {
  return _objectSpread({
    DialogRow_fontSize: baseTheme.fontSize_ui,
    DialogRow_paddingHorizontal: baseTheme.space_inline_lg,
    DialogRow_marginVertical: baseTheme.space_stack_lg
  }, baseTheme);
};

exports.dialogRowTheme = dialogRowTheme;

var dialogTitleTheme = function dialogTitleTheme(baseTheme) {
  return _objectSpread({
    DialogTitle_color: baseTheme.h4_color,
    DialogTitle_fontSize: baseTheme.h4_fontSize,
    DialogTitle_fontWeight: baseTheme.h4_fontWeight,
    DialogTitleIcon_margin: baseTheme.space_inline_sm,
    DialogTitleIcon_size: (0, _styles.pxToEm)(24)
  }, baseTheme);
};

exports.dialogTitleTheme = dialogTitleTheme;